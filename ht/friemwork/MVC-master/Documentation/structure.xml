<?xml version="1.0" encoding="utf-8"?>
<project version="2.0.0a12" title="">
  <file path="Cache.php" hash="bd4393ebce455ae2fe156e2230544692" package="Default">
    <class final="false" abstract="false" namespace="Core" line="24" package="MVC">
      <extends/>
      <name>Cache</name>
      <full_name>\Core\Cache</full_name>
      <docblock line="4">
        <description>Interface for creating, getting, and removing items from the cache.</description>
        <long-description>&lt;p&gt;Sample usage:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (Core\Cache::has('foo')) {
    echo Core\Cache::get('foo');
} else {
    $var = 'Hello World!';
    Core\Cache::put('foo', $var);
    echo Core\Cache::get('foo');
}
&lt;/code&gt;&lt;/pre&gt;</long-description>
        <tag line="4" name="copyright" description="Copyright (c) 2012-2013 Christopher Hill"/>
        <tag line="4" name="license" description="http://www.opensource.org/licenses/mit-license.php The MIT License"/>
        <tag line="4" name="author" description="Christopher Hill &lt;cjhill@gmail.com&gt;"/>
        <tag line="4" name="package" description="MVC"/>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="34" package="MVC">
        <name>has</name>
        <full_name>has</full_name>
        <docblock line="26">
          <description>Determines if the item is already cached, and that it is valid.</description>
          <long-description></long-description>
          <tag line="26" name="access" description="public"/>
          <tag line="26" name="param" description="The name of the cached item." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="26" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="26" name="static" description=""/>
        </docblock>
        <argument line="34">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="65" package="MVC">
        <name>get</name>
        <full_name>get</full_name>
        <docblock line="55">
          <description>Get a cached item.</description>
          <long-description>&lt;p&gt;Note: You should call has() before get()'ing and item to ensure it exists.&lt;/p&gt;</long-description>
          <tag line="55" name="access" description="public"/>
          <tag line="55" name="param" description="The name of the cached item." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="55" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="55" name="static" description=""/>
        </docblock>
        <argument line="65">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="77" package="MVC">
        <name>put</name>
        <full_name>put</full_name>
        <docblock line="69">
          <description>Save an item to the cache.</description>
          <long-description></long-description>
          <tag line="69" name="access" description="public"/>
          <tag line="69" name="param" description="The name of the cached item." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="69" name="param" description="The content that we wish to cache." type="string" variable="$content">
            <type by_reference="false">string</type>
          </tag>
          <tag line="69" name="static" description=""/>
        </docblock>
        <argument line="77">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="77">
          <name>$content</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="91" package="MVC">
        <name>remove</name>
        <full_name>remove</full_name>
        <docblock line="84">
          <description>Remove an item from the cache.</description>
          <long-description></long-description>
          <tag line="84" name="param" description="The name of the cached item." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="84" name="return" description="Whether the cached object was successfully removed." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="84" name="static" description=""/>
        </docblock>
        <argument line="91">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file Cache.php</error>
    </parse_markers>
  </file>
  <file path="Config.php" hash="8ec8804cb403d6f0c98c71e386237d6b" package="Default">
    <class final="false" abstract="false" namespace="Core" line="22" package="MVC">
      <extends/>
      <name>Config</name>
      <full_name>\Core\Config</full_name>
      <docblock line="4">
        <description>All of the configurations the application has set via its config file.</description>
        <long-description>&lt;p&gt;Each application will have its own config file located in the project root
directory. You can set, get, and remove any config variable via this class.&lt;/p&gt;

&lt;p&gt;Sample usage:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Core\Config::set('foo', 'Hello World!');
echo Core\Config::get('foo');
&lt;/code&gt;&lt;/pre&gt;</long-description>
        <tag line="4" name="copyright" description="Copyright (c) 2012-2013 Christopher Hill"/>
        <tag line="4" name="license" description="http://www.opensource.org/licenses/mit-license.php The MIT License"/>
        <tag line="4" name="author" description="Christopher Hill &lt;cjhill@gmail.com&gt;"/>
        <tag line="4" name="package" description="MVC"/>
      </docblock>
      <property final="false" static="true" visibility="private" line="31" namespace="Core" package="Default">
        <name>$_store</name>
        <default>array()</default>
        <docblock line="24">
          <description>The holder for all of the config variables.</description>
          <long-description></long-description>
          <tag line="24" name="access" description="private"/>
          <tag line="24" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="24" name="static" description=""/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="40" package="MVC">
        <name>load</name>
        <full_name>load</full_name>
        <docblock line="33">
          <description>Load the applications config file.</description>
          <long-description></long-description>
          <tag line="33" name="access" description="public"/>
          <tag line="33" name="param" description="The project that we are working with." type="string" variable="$projectName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="33" name="static" description=""/>
        </docblock>
        <argument line="40">
          <name>$projectName</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="63" package="MVC">
        <name>set</name>
        <full_name>set</full_name>
        <docblock line="47">
          <description>Set a config variable.</description>
          <long-description>&lt;p&gt;We do not want to overwrite configurations by mistake, so if a config
variable exists then by default we will throw an exception. The user
can force the overwrite if the really want to.&lt;/p&gt;</long-description>
          <tag line="47" name="access" description="public"/>
          <tag line="47" name="param" description="The section to write to" type="string" variable="$section">
            <type by_reference="false">string</type>
          </tag>
          <tag line="47" name="param" description="The config to write to." type="string" variable="$variable">
            <type by_reference="false">string</type>
          </tag>
          <tag line="47" name="param" description="The value that we wish to give the config variable." type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="47" name="param" description="Whether we want to overwrite existing config variables." type="boolean" variable="$forceOverwrite">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="47" name="return" description="True if success, Exception if error." type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="47" name="throws" description="If the user is overwriting config variable without forcing." type="\Core\Exception">
            <type by_reference="false">\Core\Exception</type>
          </tag>
          <tag line="47" name="static" description=""/>
        </docblock>
        <argument line="63">
          <name>$section</name>
          <default></default>
          <type/>
        </argument>
        <argument line="63">
          <name>$variable</name>
          <default></default>
          <type/>
        </argument>
        <argument line="63">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <argument line="63">
          <name>$forceOverwrite</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="84" package="MVC">
        <name>get</name>
        <full_name>get</full_name>
        <docblock line="73">
          <description>Get a config variable.</description>
          <long-description>&lt;p&gt;If the config variable does not exist then the $default is returned.&lt;/p&gt;</long-description>
          <tag line="73" name="param" description="The section to search in." type="string" variable="$section">
            <type by_reference="false">string</type>
          </tag>
          <tag line="73" name="param" description="The config to return." type="string" variable="$variable">
            <type by_reference="false">string</type>
          </tag>
          <tag line="73" name="param" description="Return this if the config variable is not found." type="mixed" variable="$default">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="73" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="73" name="static" description=""/>
        </docblock>
        <argument line="84">
          <name>$section</name>
          <default></default>
          <type/>
        </argument>
        <argument line="84">
          <name>$variable</name>
          <default></default>
          <type/>
        </argument>
        <argument line="84">
          <name>$default</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="99" package="MVC">
        <name>remove</name>
        <full_name>remove</full_name>
        <docblock line="90">
          <description>Remove a variable from the config.</description>
          <long-description></long-description>
          <tag line="90" name="access" description="public"/>
          <tag line="90" name="param" description="The section to write to" type="string" variable="$section">
            <type by_reference="false">string</type>
          </tag>
          <tag line="90" name="param" description="The config to write to." type="string" variable="$variable">
            <type by_reference="false">string</type>
          </tag>
          <tag line="90" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="90" name="static" description=""/>
        </docblock>
        <argument line="99">
          <name>$section</name>
          <default></default>
          <type/>
        </argument>
        <argument line="99">
          <name>$variable</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file Config.php</error>
    </parse_markers>
  </file>
  <file path="Controller.php" hash="b6badf6a016515832ee7dfd4b3ed7712" package="Default">
    <class final="false" abstract="false" namespace="Core" line="15" package="MVC">
      <extends/>
      <name>Controller</name>
      <full_name>\Core\Controller</full_name>
      <docblock line="4">
        <description>Connects the Controller to the View.</description>
        <long-description>&lt;p&gt;Handles common functionality between application controllers such as setting
the layout, forwarding, and redirecting.&lt;/p&gt;</long-description>
        <tag line="4" name="copyright" description="Copyright (c) 2012-2013 Christopher Hill"/>
        <tag line="4" name="license" description="http://www.opensource.org/licenses/mit-license.php The MIT License"/>
        <tag line="4" name="author" description="Christopher Hill &lt;cjhill@gmail.com&gt;"/>
        <tag line="4" name="package" description="MVC"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="23" namespace="Core" package="Default">
        <name>$child</name>
        <default></default>
        <docblock line="17">
          <description>The controller that we are managing.</description>
          <long-description></long-description>
          <tag line="17" name="access" description="public"/>
          <tag line="17" name="var" description="" type="\Core\Controller">
            <type by_reference="false">\Core\Controller</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="31" namespace="Core" package="Default">
        <name>$view</name>
        <default></default>
        <docblock line="25">
          <description>Instance of the view.</description>
          <long-description></long-description>
          <tag line="25" name="access" description="public"/>
          <tag line="25" name="var" description="" type="\Core\View">
            <type by_reference="false">\Core\View</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="38" package="MVC">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="33">
          <description>The constructor for the controller.</description>
          <long-description></long-description>
          <tag line="33" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="60" package="MVC">
        <name>setLayout</name>
        <full_name>setLayout</full_name>
        <docblock line="43">
          <description>Change the layout from the default.</description>
          <long-description>&lt;p&gt;If you do not want your View Script to use a layout then pass in boolean
false. To set a new layout then pass in the layouts file name without
the .phtml extention. Your layouts are located in your MyProject/Layout
directory. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$this-&gt;view-&gt;setLayout('default');
&lt;/code&gt;&lt;/pre&gt;</long-description>
          <tag line="43" name="access" description="public"/>
          <tag line="43" name="param" description="Which layout we wish to use." type="boolean|string" variable="$layout">
            <type by_reference="false">boolean</type>
            <type by_reference="false">string</type>
          </tag>
          <tag line="43" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="43" name="throws" description="If the layout does not exist." type="\Core\Exception">
            <type by_reference="false">\Core\Exception</type>
          </tag>
        </docblock>
        <argument line="60">
          <name>$layout</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="103" package="MVC">
        <name>forward</name>
        <full_name>forward</full_name>
        <docblock line="80">
          <description>Whilst in controller context, move to another controller/action.</description>
          <long-description>&lt;p&gt;When forwarding to a new action or controller/action, the URL will not
change, this is an internal redirect.&lt;/p&gt;

&lt;p&gt;Forwarding to an action in the same controller&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$this-&gt;forward('newAction');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Forwarding to a new controller and action.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$this-&gt;forward('newAction', 'newController');
&lt;/code&gt;&lt;/pre&gt;</long-description>
          <tag line="80" name="access" description="public"/>
          <tag line="80" name="param" description="The action we wish to forward to." type="string" variable="$action">
            <type by_reference="false">string</type>
          </tag>
          <tag line="80" name="param" description="The controller we wish to forward to." type="string" variable="$controller">
            <type by_reference="false">string</type>
          </tag>
          <tag line="80" name="throws" description="From the Dispatcher if the controller/action does not exist." type="\Core\Exception">
            <type by_reference="false">\Core\Exception</type>
          </tag>
        </docblock>
        <argument line="103">
          <name>$action</name>
          <default>'index'</default>
          <type/>
        </argument>
        <argument line="103">
          <name>$controller</name>
          <default>''</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="137" package="MVC">
        <name>redirect</name>
        <full_name>redirect</full_name>
        <docblock line="128">
          <description>Redirect the user to a new page.</description>
          <long-description>&lt;p&gt;Unlike the forward() function, this will perform a header redirect,
causing the URL to change.&lt;/p&gt;</long-description>
          <tag line="128" name="access" description="public"/>
          <tag line="128" name="param" description="The URL that we wish to redirect to." type="string" variable="$url">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="137">
          <name>$url</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file Controller.php</error>
    </parse_markers>
  </file>
  <file path="Database.php" hash="d4e2541c7727388bf4a0bf0b3a654d68" package="Default">
    <class final="false" abstract="false" namespace="Core" line="12" package="MVC">
      <extends/>
      <name>Database</name>
      <full_name>\Core\Database</full_name>
      <docblock line="4">
        <description>Handles the connection and query runners for databases.</description>
        <long-description></long-description>
        <tag line="4" name="copyright" description="Copyright (c) 2012-2013 Christopher Hill"/>
        <tag line="4" name="license" description="http://www.opensource.org/licenses/mit-license.php The MIT License"/>
        <tag line="4" name="author" description="Christopher Hill &lt;cjhill@gmail.com&gt;"/>
        <tag line="4" name="package" description="MVC"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="20" namespace="Core" package="Default">
        <name>$_connection</name>
        <default></default>
        <docblock line="14">
          <description>The connection to the database.</description>
          <long-description></long-description>
          <tag line="14" name="access" description="protected"/>
          <tag line="14" name="var" description="" type="\PDO">
            <type by_reference="false">\PDO</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="28" namespace="Core" package="Default">
        <name>$_statement</name>
        <default></default>
        <docblock line="22">
          <description>The query that we have just run.</description>
          <long-description></long-description>
          <tag line="22" name="access" description="protected"/>
          <tag line="22" name="var" description="" type="\PDOStatement">
            <type by_reference="false">\PDOStatement</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Core" line="35" package="MVC">
        <name>connect</name>
        <full_name>connect</full_name>
        <docblock line="30">
          <description>Connect to the database if we have not already.</description>
          <long-description></long-description>
          <tag line="30" name="access" description="private"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Core" line="67" package="MVC">
        <name>run</name>
        <full_name>run</full_name>
        <docblock line="58">
          <description>Execute an SQL statement on the database.</description>
          <long-description></long-description>
          <tag line="58" name="access" description="protected"/>
          <tag line="58" name="param" description="The SQL statement to run." type="string" variable="$sql">
            <type by_reference="false">string</type>
          </tag>
          <tag line="58" name="param" description="The data to pass into the prepared statement." type="array" variable="$data">
            <type by_reference="false">array</type>
          </tag>
          <tag line="58" name="param" description="Whether we should reset the model data." type="boolean" variable="$reset">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="58" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="67">
          <name>$sql</name>
          <default></default>
          <type/>
        </argument>
        <argument line="67">
          <name>$data</name>
          <default>array()</default>
          <type/>
        </argument>
        <argument line="67">
          <name>$reset</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file Database.php</error>
    </parse_markers>
  </file>
  <file path="Dispatcher.php" hash="dd50f574463634e3bf5af39c522b14e3" package="Default">
    <class final="false" abstract="false" namespace="Core" line="15" package="MVC">
      <extends/>
      <name>Dispatcher</name>
      <full_name>\Core\Dispatcher</full_name>
      <docblock line="4">
        <description>Runs a specified controller and action.</description>
        <long-description>&lt;p&gt;This is initially called by the Router once it finds a valid route, but it
can also be called by a controller to forward to another controller/action.&lt;/p&gt;</long-description>
        <tag line="4" name="copyright" description="Copyright (c) 2012-2013 Christopher Hill"/>
        <tag line="4" name="license" description="http://www.opensource.org/licenses/mit-license.php The MIT License"/>
        <tag line="4" name="author" description="Christopher Hill &lt;cjhill@gmail.com&gt;"/>
        <tag line="4" name="package" description="MVC"/>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="28" package="MVC">
        <name>loadController</name>
        <full_name>loadController</full_name>
        <docblock line="17">
          <description>Load a controller and it's respective action.</description>
          <long-description>&lt;p&gt;If no action is passed in then we use the action as defined by the URL. If
no action is specified in the URL then we use the default og 'index'.&lt;/p&gt;</long-description>
          <tag line="17" name="access" description="public"/>
          <tag line="17" name="param" description="Name of the controller we wish to load." type="string" variable="$controllerName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="17" name="param" description="Name of the action we wish to load." type="string" variable="$action">
            <type by_reference="false">string</type>
          </tag>
          <tag line="17" name="static" description=""/>
        </docblock>
        <argument line="28">
          <name>$controllerName</name>
          <default></default>
          <type/>
        </argument>
        <argument line="28">
          <name>$action</name>
          <default>''</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="79" package="MVC">
        <name>loadAction</name>
        <full_name>loadAction</full_name>
        <docblock line="71">
          <description>Load a controllers action, and ask the View to render it.</description>
          <long-description></long-description>
          <tag line="71" name="access" description="public"/>
          <tag line="71" name="param" description="Controller object that we want to load the action for." type="object" variable="$controller">
            <type by_reference="false">object</type>
          </tag>
          <tag line="71" name="param" description="Name of the action we wish to load." type="string" variable="$action">
            <type by_reference="false">string</type>
          </tag>
          <tag line="71" name="static" description=""/>
        </docblock>
        <argument line="79">
          <name>$controller</name>
          <default></default>
          <type/>
        </argument>
        <argument line="79">
          <name>$action</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file Dispatcher.php</error>
    </parse_markers>
  </file>
  <file path="Event.php" hash="d7e4765074d05b9cc2fe71041f6449d6" package="Default">
    <class final="false" abstract="false" namespace="Core" line="22" package="MVC">
      <extends/>
      <name>Event</name>
      <full_name>\Core\Event</full_name>
      <docblock line="4">
        <description>Pass events within the MVC to the application.</description>
        <long-description>&lt;p&gt;We currently listen for a selection of events which are then passed to the
application to handle. These events are:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;A request is initialised.&lt;/li&gt;
    &lt;li&gt;A controller is initialised.&lt;/li&gt;
    &lt;li&gt;An action has been called.&lt;/li&gt;
    &lt;li&gt;We are about to shutdown (page has been rendered).&lt;/li&gt;
&lt;/ul&gt;</long-description>
        <tag line="4" name="copyright" description="Copyright (c) 2012-2013 Christopher Hill"/>
        <tag line="4" name="license" description="http://www.opensource.org/licenses/mit-license.php The MIT License"/>
        <tag line="4" name="author" description="Christopher Hill &lt;cjhill@gmail.com&gt;"/>
        <tag line="4" name="package" description="MVC"/>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="32" package="MVC">
        <name>trigger</name>
        <full_name>trigger</full_name>
        <docblock line="24">
          <description>Trigger an event call to the application.</description>
          <long-description></long-description>
          <tag line="24" name="access" description="public"/>
          <tag line="24" name="param" description="The event to trigger within the appliction." type="string" variable="$event">
            <type by_reference="false">string</type>
          </tag>
          <tag line="24" name="param" description="Parameters to pass to the application." type="array" variable="$params">
            <type by_reference="false">array</type>
          </tag>
          <tag line="24" name="static" description=""/>
        </docblock>
        <argument line="32">
          <name>$event</name>
          <default></default>
          <type/>
        </argument>
        <argument line="32">
          <name>$params</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file Event.php</error>
    </parse_markers>
  </file>
  <file path="Format.php" hash="0f1d79622cb645ef57272f11e7e6956c" package="Default">
    <class final="false" abstract="false" namespace="Core" line="12" package="MVC">
      <extends/>
      <name>Format</name>
      <full_name>\Core\Format</full_name>
      <docblock line="4">
        <description>Handles all of the formatting for pages.</description>
        <long-description></long-description>
        <tag line="4" name="copyright" description="Copyright (c) 2012-2013 Christopher Hill"/>
        <tag line="4" name="license" description="http://www.opensource.org/licenses/mit-license.php The MIT License"/>
        <tag line="4" name="author" description="Christopher Hill &lt;cjhill@gmail.com&gt;"/>
        <tag line="4" name="package" description="MVC"/>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="22" package="MVC">
        <name>safeHtml</name>
        <full_name>safeHtml</full_name>
        <docblock line="14">
          <description>Make sure that anything outputted to the browser is safe.</description>
          <long-description></long-description>
          <tag line="14" name="access" description="public"/>
          <tag line="14" name="param" description="The string that we want to make safe to output." type="string" variable="$string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="14" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="14" name="static" description=""/>
        </docblock>
        <argument line="22">
          <name>$string</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="34" package="MVC">
        <name>parseUrl</name>
        <full_name>parseUrl</full_name>
        <docblock line="26">
          <description>Strips all invalid characters out of a URL.</description>
          <long-description></long-description>
          <tag line="26" name="access" description="public"/>
          <tag line="26" name="param" description="The URL we need to parse." type="string" variable="$url">
            <type by_reference="false">string</type>
          </tag>
          <tag line="26" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="26" name="static" description=""/>
        </docblock>
        <argument line="34">
          <name>$url</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file Format.php</error>
    </parse_markers>
  </file>
  <file path="Front.php" hash="6ccb8e476a6f7472f6c13bcf99df00b9" package="Default">
    <class final="false" abstract="false" namespace="Core" line="14" package="MVC">
      <extends/>
      <name>Front</name>
      <full_name>\Core\Front</full_name>
      <docblock line="4">
        <description>The front controller.</description>
        <long-description>&lt;p&gt;This class provides the bridge between all internal processes and the application.&lt;/p&gt;</long-description>
        <tag line="4" name="copyright" description="Copyright (c) 2012-2013 Christopher Hill"/>
        <tag line="4" name="license" description="http://www.opensource.org/licenses/mit-license.php The MIT License"/>
        <tag line="4" name="author" description="Christopher Hill &lt;cjhill@gmail.com&gt;"/>
        <tag line="4" name="package" description="MVC"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="23" namespace="Core" package="Default">
        <name>$_projectName</name>
        <default></default>
        <docblock line="16">
          <description>The name of the project that we are now going to run.</description>
          <long-description>&lt;p&gt;This is also the
name of the directory that contains the application.&lt;/p&gt;</long-description>
          <tag line="16" name="access" description="private"/>
          <tag line="16" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="33" namespace="Core" package="Default">
        <name>$_router</name>
        <default></default>
        <docblock line="25">
          <description>Provides information on routes that the application accepts and understands.</description>
          <long-description>&lt;p&gt;If no router is defined then we simply fall back to /controller/action URL.&lt;/p&gt;</long-description>
          <tag line="25" name="access" description="private"/>
          <tag line="25" name="var" description="" type="\Core\Core\Router">
            <type by_reference="false">\Core\Core\Router</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="42" package="MVC">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="35">
          <description>Initialises the application configuration and runs the router.</description>
          <long-description></long-description>
          <tag line="35" name="access" description="public"/>
          <tag line="35" name="param" description="The name of the project the user wishes to run." type="string" variable="$projectName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="35" name="param" description="The routes the users application requires." type="\Core\Core\Router" variable="$router">
            <type by_reference="false">\Core\Core\Router</type>
          </tag>
        </docblock>
        <argument line="42">
          <name>$projectName</name>
          <default></default>
          <type/>
        </argument>
        <argument line="42">
          <name>$router</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Core" line="68" package="MVC">
        <name>route</name>
        <full_name>route</full_name>
        <docblock line="63">
          <description>Route, and pass to the Dispatcher to run our controller/action.</description>
          <long-description></long-description>
          <tag line="63" name="access" description="private"/>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file Front.php</error>
    </parse_markers>
  </file>
  <file path="Model.php" hash="83a9ca60a1bc9f6576d699d5b21e36a3" package="Default">
    <class final="false" abstract="false" namespace="Core" line="85" package="MVC">
      <extends>\Core\Database</extends>
      <name>Model</name>
      <full_name>\Core\Model</full_name>
      <docblock line="4">
        <description>Provides a simple interface to gather data from a database.</description>
        <long-description>&lt;h2&gt;Inserting&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;// 1. Object-orientated inserting:
$user = new Model\User();
$user-&gt;name  = 'Chris';
$user-&gt;email = 'cjhill@gmail.com';
$user-&gt;save();

// 2. Pass in an array of data:
$user = new Model\User();
$user-&gt;insert(array('name' =&gt; 'Chris', 'email' =&gt; 'cjhill@gmail.com'));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Selecting&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;// 1. Select a single user very quickly:
$user = new Model\User(1);

// 2. Advanced query selecting:
$users = new Model\User();
$users-&gt;where('active', '=', 1)-&gt;where('name', '=', 'Dave')-&gt;limit(10)-&gt;find();

// 3. How many users the query found:
echo 'I found ' . $users-&gt;rowCount() . ' users.';

// 4. Loop over the found users:
while ($user = $users-&gt;fetch()) {
    echo 'Hello, ' . $user-&gt;name;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Updating&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;1. Updating a user programatically:
$user = new Model\User(1);
$user-&gt;name = 'Dave';
$user-&gt;save();

2. Passing in an array of data:
$user = new Model\User(1);
$user-&gt;save(array('name' =&gt; 'Dave'));

3. Advanced updating:
$user = new Model\User();
$user-&gt;where('id', '=', array(1, 2))-&gt;limit(2)-&gt;update(array('name' =&gt; 'Dave'));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Deleting&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;// 1. Simple deletion:
$user = new Model\User();
$user-&gt;delete(1);

// 2. Advanced deletion:
$user = new Model\User();
$user-&gt;where('id', '=', 1)-&gt;limit(1)-&gt;delete();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Running your own queries&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;// 1. In your User Model, for instance:
$this-&gt;run('SELECT * FROM user WHERE name = :name', array(':name' =&gt; 'Chris'));
$user = $this-&gt;fetch();
echo 'Hello, ' . $user-&gt;name;
&lt;/code&gt;&lt;/pre&gt;</long-description>
        <tag line="4" name="copyright" description="Copyright (c) 2012-2013 Christopher Hill"/>
        <tag line="4" name="license" description="http://www.opensource.org/licenses/mit-license.php The MIT License"/>
        <tag line="4" name="author" description="Christopher Hill &lt;cjhill@gmail.com&gt;"/>
        <tag line="4" name="package" description="MVC"/>
        <tag line="4" name="todo" description="Some kind of config schema."/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="95" namespace="Core" package="Default">
        <name>$_primaryKey</name>
        <default>'id'</default>
        <docblock line="87">
          <description>The primary key for the table.</description>
          <long-description>&lt;p&gt;This can (and should) be overridden by the extending class.&lt;/p&gt;</long-description>
          <tag line="87" name="access" description="protected"/>
          <tag line="87" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="107" namespace="Core" package="Default">
        <name>$_select</name>
        <default>array()</default>
        <docblock line="97">
          <description>Which columns we want to select.</description>
          <long-description>&lt;p&gt;To mitigate SQL errors we always append the table name to the start of
the field name, whether or not one is supplied. If no table name is
passed in then we use the default table the the extended class declared.&lt;/p&gt;</long-description>
          <tag line="97" name="access" description="private"/>
          <tag line="97" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="115" namespace="Core" package="Default">
        <name>$_from</name>
        <default>array()</default>
        <docblock line="109">
          <description>The tables that we wish to select data from.</description>
          <long-description></long-description>
          <tag line="109" name="access" description="private"/>
          <tag line="109" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="123" namespace="Core" package="Default">
        <name>$_clause</name>
        <default>array()</default>
        <docblock line="117">
          <description>The clause conditions for where and having to apply to the query.</description>
          <long-description></long-description>
          <tag line="117" name="access" description="private"/>
          <tag line="117" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="131" namespace="Core" package="Default">
        <name>$_having</name>
        <default>array()</default>
        <docblock line="125">
          <description>The having conditions to apply.</description>
          <long-description></long-description>
          <tag line="125" name="access" description="private"/>
          <tag line="125" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="139" namespace="Core" package="Default">
        <name>$_group</name>
        <default>array()</default>
        <docblock line="133">
          <description>How our queries should be grouped.</description>
          <long-description></long-description>
          <tag line="133" name="access" description="private"/>
          <tag line="133" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="147" namespace="Core" package="Default">
        <name>$_order</name>
        <default>array()</default>
        <docblock line="141">
          <description>How we should order the returned rows.</description>
          <long-description></long-description>
          <tag line="141" name="access" description="private"/>
          <tag line="141" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="155" namespace="Core" package="Default">
        <name>$_limit</name>
        <default>array()</default>
        <docblock line="149">
          <description>How we should limit the returned rows.</description>
          <long-description></long-description>
          <tag line="149" name="access" description="private"/>
          <tag line="149" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="163" namespace="Core" package="Default">
        <name>$_store</name>
        <default>array()</default>
        <docblock line="157">
          <description>Data that has been passed to the row to insert/update.</description>
          <long-description></long-description>
          <tag line="157" name="access" description="private"/>
          <tag line="157" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="171" namespace="Core" package="Default">
        <name>$_data</name>
        <default></default>
        <docblock line="165">
          <description>Data that will be passed to the query.</description>
          <long-description></long-description>
          <tag line="165" name="access" description="private"/>
          <tag line="165" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="179" namespace="Core" package="Default">
        <name>$_resetAfterQuery</name>
        <default>true</default>
        <docblock line="173">
          <description>Whether, after running a query, we should reset the model data.</description>
          <long-description></long-description>
          <tag line="173" name="access" description="private"/>
          <tag line="173" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="195" package="MVC">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="181">
          <description>Setup the model.</description>
          <long-description>&lt;p&gt;If you want to load a row automatically then you can pass an int to this
function, or to load multiple rows then you can pass an array or ints.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Load a single user row
$user = new MyProject\Model\User(1);
&lt;/code&gt;&lt;/pre&gt;</long-description>
          <tag line="181" name="access" description="public"/>
          <tag line="181" name="param" description="The ID to load automatically." type="mixed" variable="$id">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="195">
          <name>$id</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="211" package="MVC">
        <name>setReset</name>
        <full_name>setReset</full_name>
        <docblock line="204">
          <description>Whether we should reset the query data after we have run the query.</description>
          <long-description></long-description>
          <tag line="204" name="access" description="public"/>
          <tag line="204" name="param" description="" type="boolean" variable="$reset">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="204" name="return" description="For chainability." type="\Core\Model">
            <type by_reference="false">\Core\Model</type>
          </tag>
        </docblock>
        <argument line="211">
          <name>$reset</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="228" package="MVC">
        <name>select</name>
        <full_name>select</full_name>
        <docblock line="216">
          <description>Add a row to the SELECT section.</description>
          <long-description>&lt;p&gt;Note: The table name will always be prefixed to the field name to try and
mitigate errors . If none is supplied then we assume you are using the
table name that is declared in the extending class.&lt;/p&gt;</long-description>
          <tag line="216" name="access" description="public"/>
          <tag line="216" name="param" description="The field name." type="string" variable="$field">
            <type by_reference="false">string</type>
          </tag>
          <tag line="216" name="param" description="The name of the field that is supplied to you." type="string" variable="$as">
            <type by_reference="false">string</type>
          </tag>
          <tag line="216" name="return" description="For chainability." type="\Core\Model">
            <type by_reference="false">\Core\Model</type>
          </tag>
        </docblock>
        <argument line="228">
          <name>$field</name>
          <default></default>
          <type/>
        </argument>
        <argument line="228">
          <name>$as</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="247" package="MVC">
        <name>from</name>
        <full_name>from</full_name>
        <docblock line="233">
          <description>Add a table to the query.</description>
          <long-description>&lt;p&gt;Note: If no table is supplied then we will use the table defined in the
extending class. If you are not joining other tables then you do not need
to call this function.&lt;/p&gt;</long-description>
          <tag line="233" name="access" description="public"/>
          <tag line="233" name="param" description="A table that is part of the statement." type="string" variable="$table">
            <type by_reference="false">string</type>
          </tag>
          <tag line="233" name="param" description="How to join the table ('left', 'right', etc.)." type="string" variable="$joinType">
            <type by_reference="false">string</type>
          </tag>
          <tag line="233" name="param" description="First table join column." type="string" variable="$tableField">
            <type by_reference="false">string</type>
          </tag>
          <tag line="233" name="param" description="Second table join column." type="string" variable="$joinField">
            <type by_reference="false">string</type>
          </tag>
          <tag line="233" name="return" description="For chainability." type="\Core\Model">
            <type by_reference="false">\Core\Model</type>
          </tag>
        </docblock>
        <argument line="247">
          <name>$table</name>
          <default></default>
          <type/>
        </argument>
        <argument line="247">
          <name>$joinType</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="247">
          <name>$tableField</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="247">
          <name>$joinField</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="281" package="MVC">
        <name>where</name>
        <full_name>where</full_name>
        <docblock line="257">
          <description>Add a where condition to the statement.</description>
          <long-description>&lt;pre&gt;&lt;code&gt;// 1. A simple condition:
-&gt;where('name', '=', 'Chris')

// 2. An IN condition:
-&gt;where('name', 'IN', array('Chris', 'John', 'Smith'));

// You can also use the equals operator for this!
-&gt;where('name', '=',  array('Chris', 'John', 'Smith'));

// 3. Multiple where's:
-&gt;where('name', '=', 'Chris')-&gt;where('email', '=', 'cjhill@gmail.com')
&lt;/code&gt;&lt;/pre&gt;</long-description>
          <tag line="257" name="access" description="public"/>
          <tag line="257" name="param" description="The field we wish to test." type="string" variable="$field">
            <type by_reference="false">string</type>
          </tag>
          <tag line="257" name="param" description="How we wish to test the field (=, &gt;, etc.)" type="string" variable="$operator">
            <type by_reference="false">string</type>
          </tag>
          <tag line="257" name="param" description="The value to test the field against." type="string|array" variable="$value">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="257" name="param" description="How to join the where clause to the next." type="string" variable="$joiner">
            <type by_reference="false">string</type>
          </tag>
          <tag line="257" name="return" description="For chainability." type="\Core\Model">
            <type by_reference="false">\Core\Model</type>
          </tag>
        </docblock>
        <argument line="281">
          <name>$field</name>
          <default></default>
          <type/>
        </argument>
        <argument line="281">
          <name>$operator</name>
          <default></default>
          <type/>
        </argument>
        <argument line="281">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <argument line="281">
          <name>$joiner</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="302" package="MVC">
        <name>having</name>
        <full_name>having</full_name>
        <docblock line="291">
          <description>Add a having condition to the statement.</description>
          <long-description></long-description>
          <tag line="291" name="access" description="public"/>
          <tag line="291" name="param" description="The field we wish to test." type="string" variable="$field">
            <type by_reference="false">string</type>
          </tag>
          <tag line="291" name="param" description="How we wish to test the field (=, &gt;, etc.)" type="string" variable="$operator">
            <type by_reference="false">string</type>
          </tag>
          <tag line="291" name="param" description="The value to test the field against." type="string|array" variable="$value">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="291" name="param" description="How to join the where clause to the next." type="string" variable="$joiner">
            <type by_reference="false">string</type>
          </tag>
          <tag line="291" name="param" description="How many braces to open or close." type="int" variable="$brace">
            <type by_reference="false">int</type>
          </tag>
          <tag line="291" name="return" description="For chainability." type="\Core\Model">
            <type by_reference="false">\Core\Model</type>
          </tag>
        </docblock>
        <argument line="302">
          <name>$field</name>
          <default></default>
          <type/>
        </argument>
        <argument line="302">
          <name>$operator</name>
          <default></default>
          <type/>
        </argument>
        <argument line="302">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <argument line="302">
          <name>$joiner</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="302">
          <name>$brace</name>
          <default>0</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="320" package="MVC">
        <name>group</name>
        <full_name>group</full_name>
        <docblock line="313">
          <description>Group by a field.</description>
          <long-description></long-description>
          <tag line="313" name="access" description="public"/>
          <tag line="313" name="param" description="The field that we want to join on." type="string" variable="$field">
            <type by_reference="false">string</type>
          </tag>
          <tag line="313" name="return" description="For chainability." type="\Core\Model">
            <type by_reference="false">\Core\Model</type>
          </tag>
        </docblock>
        <argument line="320">
          <name>$field</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="333" package="MVC">
        <name>brace</name>
        <full_name>brace</full_name>
        <docblock line="325">
          <description>Whether to open or close a brace.</description>
          <long-description></long-description>
          <tag line="325" name="access" description="public"/>
          <tag line="325" name="param" description="Either 'open' or 'close'." type="string" variable="$status">
            <type by_reference="false">string</type>
          </tag>
          <tag line="325" name="param" description="Either 'AND' or 'OR'." type="string" variable="$joiner">
            <type by_reference="false">string</type>
          </tag>
          <tag line="325" name="return" description="For chainability." type="\Core\Model">
            <type by_reference="false">\Core\Model</type>
          </tag>
        </docblock>
        <argument line="333">
          <name>$status</name>
          <default></default>
          <type/>
        </argument>
        <argument line="333">
          <name>$joiner</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="346" package="MVC">
        <name>order</name>
        <full_name>order</full_name>
        <docblock line="338">
          <description>How to order the returned results.</description>
          <long-description></long-description>
          <tag line="338" name="access" description="public"/>
          <tag line="338" name="param" description="The field we wish to order by." type="string" variable="$field">
            <type by_reference="false">string</type>
          </tag>
          <tag line="338" name="param" description="Either 'ASC' or 'DESC'. 'ASC' by default." type="string" variable="$direction">
            <type by_reference="false">string</type>
          </tag>
          <tag line="338" name="return" description="For chainability." type="\Core\Model">
            <type by_reference="false">\Core\Model</type>
          </tag>
        </docblock>
        <argument line="346">
          <name>$field</name>
          <default></default>
          <type/>
        </argument>
        <argument line="346">
          <name>$direction</name>
          <default>'ASC'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="359" package="MVC">
        <name>limit</name>
        <full_name>limit</full_name>
        <docblock line="351">
          <description>How to limit the returned results.</description>
          <long-description></long-description>
          <tag line="351" name="access" description="public"/>
          <tag line="351" name="param" description="How many results to return." type="int" variable="$limit">
            <type by_reference="false">int</type>
          </tag>
          <tag line="351" name="param" description="The offset to start the results from." type="int" variable="$start">
            <type by_reference="false">int</type>
          </tag>
          <tag line="351" name="return" description="For chainability." type="\Core\Model">
            <type by_reference="false">\Core\Model</type>
          </tag>
        </docblock>
        <argument line="359">
          <name>$limit</name>
          <default></default>
          <type/>
        </argument>
        <argument line="359">
          <name>$start</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="370" package="MVC">
        <name>insert</name>
        <full_name>insert</full_name>
        <docblock line="364">
          <description>Insert a row into the table.</description>
          <long-description></long-description>
          <tag line="364" name="access" description="public"/>
          <tag line="364" name="param" description="The data to insert into the table." type="array" variable="$data">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="370">
          <name>$data</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="387" package="MVC">
        <name>find</name>
        <full_name>find</full_name>
        <docblock line="382">
          <description>Select some records from a table.</description>
          <long-description></long-description>
          <tag line="382" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="397" package="MVC">
        <name>update</name>
        <full_name>update</full_name>
        <docblock line="391">
          <description>Update a row in the table.</description>
          <long-description></long-description>
          <tag line="391" name="access" description="public"/>
          <tag line="391" name="param" description="The data to update the table with." type="array" variable="$data">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="397">
          <name>$data</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="418" package="MVC">
        <name>save</name>
        <full_name>save</full_name>
        <docblock line="412">
          <description>Shorthand for the insert and update functions.</description>
          <long-description></long-description>
          <tag line="412" name="access" description="public"/>
          <tag line="412" name="param" description="The data to insert or update." type="array" variable="$data">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="418">
          <name>$data</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="430" package="MVC">
        <name>delete</name>
        <full_name>delete</full_name>
        <docblock line="424">
          <description>Delete rows from the table.</description>
          <long-description></long-description>
          <tag line="424" name="access" description="public"/>
          <tag line="424" name="param" description="The ID of the row we wish to delete." type="int" variable="$id">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="430">
          <name>$id</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="446" package="MVC">
        <name>build</name>
        <full_name>build</full_name>
        <docblock line="439">
          <description>Piece together all of the sections of the query.</description>
          <long-description></long-description>
          <tag line="439" name="access" description="public"/>
          <tag line="439" name="param" description="What type of query we wish to build." type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="439" name="return" description="The SQL that has been generated." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="446">
          <name>$type</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Core" line="463" package="MVC">
        <name>buildInsert</name>
        <full_name>buildInsert</full_name>
        <docblock line="457">
          <description>Build an insert statement.</description>
          <long-description></long-description>
          <tag line="457" name="access" description="private"/>
          <tag line="457" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Core" line="477" package="MVC">
        <name>buildSelect</name>
        <full_name>buildSelect</full_name>
        <docblock line="471">
          <description>Build a select statement.</description>
          <long-description></long-description>
          <tag line="471" name="access" description="private"/>
          <tag line="471" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Core" line="493" package="MVC">
        <name>buildUpdate</name>
        <full_name>buildUpdate</full_name>
        <docblock line="487">
          <description>Build an update statement.</description>
          <long-description></long-description>
          <tag line="487" name="access" description="private"/>
          <tag line="487" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Core" line="506" package="MVC">
        <name>buildDelete</name>
        <full_name>buildDelete</full_name>
        <docblock line="500">
          <description>Build a delete statement.</description>
          <long-description></long-description>
          <tag line="500" name="access" description="private"/>
          <tag line="500" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Core" line="518" package="MVC">
        <name>buildFragmentSelect</name>
        <full_name>buildFragmentSelect</full_name>
        <docblock line="512">
          <description>Build the SELECT portion of the statement.</description>
          <long-description></long-description>
          <tag line="512" name="access" description="private"/>
          <tag line="512" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Core" line="547" package="MVC">
        <name>buildFragmentFrom</name>
        <full_name>buildFragmentFrom</full_name>
        <docblock line="541">
          <description>Build the FROM portion of the statement.</description>
          <long-description></long-description>
          <tag line="541" name="access" description="private"/>
          <tag line="541" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Core" line="572" package="MVC">
        <name>buildFragmentUpdate</name>
        <full_name>buildFragmentUpdate</full_name>
        <docblock line="566">
          <description>Build the SET portion of the statement.</description>
          <long-description></long-description>
          <tag line="566" name="access" description="private"/>
          <tag line="566" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Core" line="600" package="MVC">
        <name>buildFragmentWhere</name>
        <full_name>buildFragmentWhere</full_name>
        <docblock line="589">
          <description>Build the WHERE portion of the statement.</description>
          <long-description>&lt;p&gt;Note: So we do not interfere with any field names we label our prepared
variables prefixed with "__where_".&lt;/p&gt;</long-description>
          <tag line="589" name="access" description="private"/>
          <tag line="589" name="param" description="Whether this is a WHERE or HAVING clause." type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="589" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="589" name="todo" description="Allow for OR's."/>
        </docblock>
        <argument line="600">
          <name>$type</name>
          <default>'WHERE'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Core" line="665" package="MVC">
        <name>buildFragmentGroup</name>
        <full_name>buildFragmentGroup</full_name>
        <docblock line="659">
          <description>Build the GROUP BY portion of the statement.</description>
          <long-description></long-description>
          <tag line="659" name="access" description="private"/>
          <tag line="659" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Core" line="677" package="MVC">
        <name>buildFragmentOrder</name>
        <full_name>buildFragmentOrder</full_name>
        <docblock line="671">
          <description>Build the ORDER BY portion of the statement.</description>
          <long-description></long-description>
          <tag line="671" name="access" description="private"/>
          <tag line="671" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Core" line="700" package="MVC">
        <name>buildFragmentLimit</name>
        <full_name>buildFragmentLimit</full_name>
        <docblock line="694">
          <description>Build the LIMIT portion of the statement.</description>
          <long-description></long-description>
          <tag line="694" name="access" description="private"/>
          <tag line="694" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="721" package="MVC">
        <name>rowCount</name>
        <full_name>rowCount</full_name>
        <docblock line="715">
          <description>Get how many rows the statement located.</description>
          <long-description></long-description>
          <tag line="715" name="access" description="public"/>
          <tag line="715" name="return" description="int if statement was successful, boolean false otherwise." type="int|boolean">
            <type by_reference="false">int</type>
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="734" package="MVC">
        <name>fetch</name>
        <full_name>fetch</full_name>
        <docblock line="727">
          <description>Get the next row of the located results.</description>
          <long-description></long-description>
          <tag line="727" name="access" description="public"/>
          <tag line="727" name="param" description="In what format the dataset should be returned." type="\PDO" variable="$method">
            <type by_reference="false">\PDO</type>
          </tag>
          <tag line="727" name="return" description="Array if statement was successful, boolean false otherwise." type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="734">
          <name>$method</name>
          <default>\PDO::FETCH_OBJ</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="747" package="MVC">
        <name>reset</name>
        <full_name>reset</full_name>
        <docblock line="740">
          <description>Reset the query ready for the next one to avoid contamination.</description>
          <long-description>&lt;p&gt;Note: This function is called everytime we have run a query automatically.&lt;/p&gt;</long-description>
          <tag line="740" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="770" package="MVC">
        <name>__set</name>
        <full_name>__set</full_name>
        <docblock line="759">
          <description>Set a variable for the row.</description>
          <long-description>&lt;p&gt;Note: This is only used for inserting and updating statements. It will
also update any previous value the field had.&lt;/p&gt;</long-description>
          <tag line="759" name="access" description="public"/>
          <tag line="759" name="param" description="The field to manipulate." type="string" variable="$variable">
            <type by_reference="false">string</type>
          </tag>
          <tag line="759" name="param" description="The field's value." type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="759" name="magic" description=""/>
        </docblock>
        <argument line="770">
          <name>$variable</name>
          <default></default>
          <type/>
        </argument>
        <argument line="770">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="784" package="MVC">
        <name>__get</name>
        <full_name>__get</full_name>
        <docblock line="774">
          <description>Get a field value.</description>
          <long-description>&lt;p&gt;Note: This is only used for inserting and updating statements. For all
other statements you can use the fetch() function.&lt;/p&gt;</long-description>
          <tag line="774" name="access" description="public"/>
          <tag line="774" name="param" description="The name of the field." type="string" variable="$field">
            <type by_reference="false">string</type>
          </tag>
          <tag line="774" name="return" description="String if exists, boolean false otherwise." type="string|boolean">
            <type by_reference="false">string</type>
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="784">
          <name>$field</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file Model.php</error>
    </parse_markers>
  </file>
  <file path="Notice.php" hash="281270ac1763028962be44daa0f7a45a" package="Default">
    <class final="false" abstract="false" namespace="Core" line="12" package="MVC">
      <extends/>
      <name>Notice</name>
      <full_name>\Core\Notice</full_name>
      <docblock line="4">
        <description>Generates a standard HTML notice container.</description>
        <long-description></long-description>
        <tag line="4" name="copyright" description="Copyright (c) 2012-2013 Christopher Hill"/>
        <tag line="4" name="license" description="http://www.opensource.org/licenses/mit-license.php The MIT License"/>
        <tag line="4" name="author" description="Christopher Hill &lt;cjhill@gmail.com&gt;"/>
        <tag line="4" name="package" description="MVC"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="20" namespace="Core" package="Default">
        <name>$_status</name>
        <default>'info'</default>
        <docblock line="14">
          <description>What type of notice this is.</description>
          <long-description></long-description>
          <tag line="14" name="access" description="private"/>
          <tag line="14" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="28" namespace="Core" package="Default">
        <name>$_title</name>
        <default></default>
        <docblock line="22">
          <description>The title of the notice.</description>
          <long-description></long-description>
          <tag line="22" name="access" description="private"/>
          <tag line="22" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="36" namespace="Core" package="Default">
        <name>$_intro</name>
        <default></default>
        <docblock line="30">
          <description>The introduction of the notice.</description>
          <long-description></long-description>
          <tag line="30" name="access" description="private"/>
          <tag line="30" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="44" namespace="Core" package="Default">
        <name>$_list</name>
        <default></default>
        <docblock line="38">
          <description>The bullet points for the notice.</description>
          <long-description></long-description>
          <tag line="38" name="access" description="private"/>
          <tag line="38" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="52" namespace="Core" package="Default">
        <name>$_class</name>
        <default></default>
        <docblock line="46">
          <description>The CSS class to assign the notice.</description>
          <long-description></long-description>
          <tag line="46" name="access" description="private"/>
          <tag line="46" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="63" package="MVC">
        <name>setStatus</name>
        <full_name>setStatus</full_name>
        <docblock line="54">
          <description>Set the title of the notice.</description>
          <long-description>&lt;p&gt;Note: The notice can either be "success", "error", or "info".&lt;/p&gt;</long-description>
          <tag line="54" name="access" description="public"/>
          <tag line="54" name="param" description="What type of notice this is." type="string" variable="$status">
            <type by_reference="false">string</type>
          </tag>
          <tag line="54" name="return" description="For chainability." type="\Core\Core\Notice">
            <type by_reference="false">\Core\Core\Notice</type>
          </tag>
        </docblock>
        <argument line="63">
          <name>$status</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="74" package="MVC">
        <name>setTitle</name>
        <full_name>setTitle</full_name>
        <docblock line="67">
          <description>Set the title of the notice.</description>
          <long-description></long-description>
          <tag line="67" name="access" description="public"/>
          <tag line="67" name="param" description="What will be displayed at the top of the notice." type="string" variable="$title">
            <type by_reference="false">string</type>
          </tag>
          <tag line="67" name="return" description="For chainability." type="\Core\Core\Notice">
            <type by_reference="false">\Core\Core\Notice</type>
          </tag>
        </docblock>
        <argument line="74">
          <name>$title</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="85" package="MVC">
        <name>setIntro</name>
        <full_name>setIntro</full_name>
        <docblock line="78">
          <description>Set the introduction of the notice.</description>
          <long-description></long-description>
          <tag line="78" name="access" description="public"/>
          <tag line="78" name="param" description="What be displayed just below the title." type="string" variable="$intro">
            <type by_reference="false">string</type>
          </tag>
          <tag line="78" name="return" description="For chainability." type="\Core\Core\Notice">
            <type by_reference="false">\Core\Core\Notice</type>
          </tag>
        </docblock>
        <argument line="85">
          <name>$intro</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="97" package="MVC">
        <name>setList</name>
        <full_name>setList</full_name>
        <docblock line="89">
          <description>Add a bullet point list to the notice.</description>
          <long-description></long-description>
          <tag line="89" name="access" description="public"/>
          <tag line="89" name="param" description="The items to place into a list." type="string|array" variable="$items">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="89" name="return" description="For chainability." type="\Core\Core\Notice">
            <type by_reference="false">\Core\Core\Notice</type>
          </tag>
          <tag line="89" name="recurvive" description=""/>
        </docblock>
        <argument line="97">
          <name>$items</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="120" package="MVC">
        <name>setClass</name>
        <full_name>setClass</full_name>
        <docblock line="113">
          <description>Any classes to assign to the notice.</description>
          <long-description></long-description>
          <tag line="113" name="access" description="public"/>
          <tag line="113" name="param" description="CSS classes to assign to the notice." type="string" variable="$class">
            <type by_reference="false">string</type>
          </tag>
          <tag line="113" name="return" description="For chainability." type="\Core\Core\Notice">
            <type by_reference="false">\Core\Core\Notice</type>
          </tag>
        </docblock>
        <argument line="120">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="130" package="MVC">
        <name>generate</name>
        <full_name>generate</full_name>
        <docblock line="124">
          <description>Generate the HTML notice.</description>
          <long-description></long-description>
          <tag line="124" name="access" description="public"/>
          <tag line="124" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file Notice.php</error>
    </parse_markers>
  </file>
  <file path="Profiler.php" hash="f94be006390e7c09925e7608984c49d2" package="Default">
    <class final="false" abstract="false" namespace="Core" line="19" package="MVC">
      <extends/>
      <name>Profiler</name>
      <full_name>\Core\Profiler</full_name>
      <docblock line="4">
        <description>Profiles the flow of the application as code executes.</description>
        <long-description>&lt;p&gt;Allows the creation of a waterfall diagram documenting execution time and
memory management, allowing easy identification of slow code and which areas
are using large amounts of data. The profile nests items, so you can see how
a certain item got to be called.&lt;/p&gt;</long-description>
        <tag line="4" name="copyright" description="Copyright (c) 2012-2013 Christopher Hill"/>
        <tag line="4" name="license" description="http://www.opensource.org/licenses/mit-license.php The MIT License"/>
        <tag line="4" name="author" description="Christopher Hill &lt;cjhill@gmail.com&gt;"/>
        <tag line="4" name="package" description="MVC"/>
        <tag line="4" name="see" description="\Core\/Library/MyProject/View/Helper/Profiler.php" refers="\Core\/Library/MyProject/View/Helper/Profiler.php"/>
      </docblock>
      <property final="false" static="true" visibility="private" line="47" namespace="Core" package="Default">
        <name>$_stack</name>
        <default>array()</default>
        <docblock line="21">
          <description>A stack of traces that have occurred through the running of the application.</description>
          <long-description>&lt;pre&gt;&lt;code&gt;array(
    array(
        'type'  =&gt; 'Core',
        'name'  =&gt; 'Request',
        'start' =&gt; 123.1,
        'end'   =&gt; 123.2,
        'mem'   =&gt; 1.0
    ),
    array(
        'type'  =&gt; 'Controller',
        'name'  =&gt; 'Index',
        'start' =&gt; 321.5,
        'end'   =&gt; 321.8,
        'mem'   =&gt; 2.5
    )
)
&lt;/code&gt;&lt;/pre&gt;</long-description>
          <tag line="21" name="access" description="private"/>
          <tag line="21" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="21" name="static" description=""/>
        </docblock>
      </property>
      <property final="false" static="true" visibility="private" line="56" namespace="Core" package="Default">
        <name>$_requestStart</name>
        <default></default>
        <docblock line="49">
          <description>The time we started profiling the application.</description>
          <long-description></long-description>
          <tag line="49" name="access" description="private"/>
          <tag line="49" name="var" description="" type="float">
            <type by_reference="false">float</type>
          </tag>
          <tag line="49" name="static" description=""/>
        </docblock>
      </property>
      <property final="false" static="true" visibility="private" line="65" namespace="Core" package="Default">
        <name>$_requestEnd</name>
        <default></default>
        <docblock line="58">
          <description>The time we finished profiling the application.</description>
          <long-description></long-description>
          <tag line="58" name="access" description="private"/>
          <tag line="58" name="var" description="" type="float">
            <type by_reference="false">float</type>
          </tag>
          <tag line="58" name="static" description=""/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="73" package="MVC">
        <name>start</name>
        <full_name>start</full_name>
        <docblock line="67">
          <description>Start the profiler.</description>
          <long-description></long-description>
          <tag line="67" name="access" description="public"/>
          <tag line="67" name="static" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="83" package="MVC">
        <name>stop</name>
        <full_name>stop</full_name>
        <docblock line="77">
          <description>Stop the profiling.</description>
          <long-description></long-description>
          <tag line="77" name="access" description="public"/>
          <tag line="77" name="static" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="98" package="MVC">
        <name>register</name>
        <full_name>register</full_name>
        <docblock line="87">
          <description>The start of a trace.</description>
          <long-description>&lt;p&gt;We add new traces to the start of the array so that when we deregister
them we shouldn't, hopefully, have to go through as many iterations.&lt;/p&gt;</long-description>
          <tag line="87" name="access" description="public"/>
          <tag line="87" name="param" description="The type of code that is running." type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="87" name="param" description="How we will reference the trace in the stack." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="87" name="static" description=""/>
        </docblock>
        <argument line="98">
          <name>$type</name>
          <default></default>
          <type/>
        </argument>
        <argument line="98">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="120" package="MVC">
        <name>deregister</name>
        <full_name>deregister</full_name>
        <docblock line="112">
          <description>The end of a trace.</description>
          <long-description></long-description>
          <tag line="112" name="access" description="public"/>
          <tag line="112" name="param" description="The type of code that is running." type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="112" name="param" description="How we will reference the trace in the stack." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="112" name="static" description=""/>
        </docblock>
        <argument line="120">
          <name>$type</name>
          <default></default>
          <type/>
        </argument>
        <argument line="120">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="147" package="MVC">
        <name>getProfilerData</name>
        <full_name>getProfilerData</full_name>
        <docblock line="140">
          <description>Return the stack of traces we recorded for this request.</description>
          <long-description></long-description>
          <tag line="140" name="access" description="public"/>
          <tag line="140" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="140" name="static" description=""/>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file Profiler.php</error>
    </parse_markers>
  </file>
  <file path="Request.php" hash="13e573977e697e5ad69bca6fbf9a0bbe" package="Default">
    <class final="false" abstract="false" namespace="Core" line="12" package="MVC">
      <extends/>
      <name>Request</name>
      <full_name>\Core\Request</full_name>
      <docblock line="4">
        <description>Handles all of the request based aspects of the system.</description>
        <long-description></long-description>
        <tag line="4" name="copyright" description="Copyright (c) 2012-2013 Christopher Hill"/>
        <tag line="4" name="license" description="http://www.opensource.org/licenses/mit-license.php The MIT License"/>
        <tag line="4" name="author" description="Christopher Hill &lt;cjhill@gmail.com&gt;"/>
        <tag line="4" name="package" description="MVC"/>
      </docblock>
      <property final="false" static="true" visibility="private" line="20" namespace="Core" package="Default">
        <name>$_url</name>
        <default></default>
        <docblock line="14">
          <description>The URL that the user has visited.</description>
          <long-description></long-description>
          <tag line="14" name="access" description="private"/>
          <tag line="14" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="private" line="29" namespace="Core" package="Default">
        <name>$_get</name>
        <default></default>
        <docblock line="22">
          <description>A single entry point to the $_GET superglobal</description>
          <long-description></long-description>
          <tag line="22" name="access" description="private"/>
          <tag line="22" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="22" name="static" description=""/>
        </docblock>
      </property>
      <property final="false" static="true" visibility="private" line="38" namespace="Core" package="Default">
        <name>$_post</name>
        <default></default>
        <docblock line="31">
          <description>A single entry point to the $_POST superglobal</description>
          <long-description></long-description>
          <tag line="31" name="access" description="private"/>
          <tag line="31" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="31" name="static" description=""/>
        </docblock>
      </property>
      <property final="false" static="true" visibility="private" line="47" namespace="Core" package="Default">
        <name>$_server</name>
        <default></default>
        <docblock line="40">
          <description>A single entry point to the $_SERVER superglobal.</description>
          <long-description></long-description>
          <tag line="40" name="access" description="private"/>
          <tag line="40" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="40" name="static" description=""/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="60" package="MVC">
        <name>setUrl</name>
        <full_name>setUrl</full_name>
        <docblock line="49">
          <description>Return a breakdown of the URL into their sections.</description>
          <long-description>&lt;p&gt;Note: This function accepts a URL as a parameter but is only made
available for unit testing. You shouldn't use this param in your project.&lt;/p&gt;</long-description>
          <tag line="49" name="access" description="public"/>
          <tag line="49" name="param" description="Pass in a URL to use that instead of the request URL." type="string" variable="$url">
            <type by_reference="false">string</type>
          </tag>
          <tag line="49" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="49" name="static" description=""/>
        </docblock>
        <argument line="60">
          <name>$url</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="83" package="MVC">
        <name>setUrlFragments</name>
        <full_name>setUrlFragments</full_name>
        <docblock line="71">
          <description>Break a URL down into its relevant parts.</description>
          <long-description>&lt;p&gt;This class will break it down into controller and index, and then all of
the GET parameters. If we are using a custom route then there will be no
controller/action in the URL.&lt;/p&gt;</long-description>
          <tag line="71" name="access" description="public"/>
          <tag line="71" name="param" description="The URL to parse." type="string" variable="$url">
            <type by_reference="false">string</type>
          </tag>
          <tag line="71" name="param" description="Whether we need a controller/action from the URL." type="boolean" variable="$setControllerAction">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="71" name="static" description=""/>
        </docblock>
        <argument line="83">
          <name>$url</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="83">
          <name>$setControllerAction</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="130" package="MVC">
        <name>getUrl</name>
        <full_name>getUrl</full_name>
        <docblock line="122">
          <description>Return the URL that the user has visited.</description>
          <long-description></long-description>
          <tag line="122" name="access" description="public"/>
          <tag line="122" name="param" description="What to replace '/' with." type="string" variable="$replaceSlashes">
            <type by_reference="false">string</type>
          </tag>
          <tag line="122" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="122" name="static" description=""/>
        </docblock>
        <argument line="130">
          <name>$replaceSlashes</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="153" package="MVC">
        <name>get</name>
        <full_name>get</full_name>
        <docblock line="144">
          <description>Get a single GET variable.</description>
          <long-description></long-description>
          <tag line="144" name="access" description="public"/>
          <tag line="144" name="param" description="The variable we wish to return." type="string" variable="$variable">
            <type by_reference="false">string</type>
          </tag>
          <tag line="144" name="param" description="If the variable is not found, this is returned." type="mixed" variable="$default">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="144" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="144" name="static" description=""/>
        </docblock>
        <argument line="153">
          <name>$variable</name>
          <default></default>
          <type/>
        </argument>
        <argument line="153">
          <name>$default</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="168" package="MVC">
        <name>post</name>
        <full_name>post</full_name>
        <docblock line="159">
          <description>Get a single POST variable.</description>
          <long-description></long-description>
          <tag line="159" name="access" description="public"/>
          <tag line="159" name="param" description="The variable we wish to return." type="string" variable="$variable">
            <type by_reference="false">string</type>
          </tag>
          <tag line="159" name="param" description="If the variable is not found, this is returned." type="mixed" variable="$default">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="159" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="159" name="static" description=""/>
        </docblock>
        <argument line="168">
          <name>$variable</name>
          <default></default>
          <type/>
        </argument>
        <argument line="168">
          <name>$default</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="183" package="MVC">
        <name>server</name>
        <full_name>server</full_name>
        <docblock line="174">
          <description>Get a single SERVER variable.</description>
          <long-description></long-description>
          <tag line="174" name="access" description="public"/>
          <tag line="174" name="param" description="The variable we wish to return." type="string" variable="$variable">
            <type by_reference="false">string</type>
          </tag>
          <tag line="174" name="param" description="If the variable is not found, this is returned." type="mixed" variable="$default">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="174" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="174" name="static" description=""/>
        </docblock>
        <argument line="183">
          <name>$variable</name>
          <default></default>
          <type/>
        </argument>
        <argument line="183">
          <name>$default</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="196" package="MVC">
        <name>isAjax</name>
        <full_name>isAjax</full_name>
        <docblock line="189">
          <description>Check whether the users request was a standard request, or via Ajax.</description>
          <long-description></long-description>
          <tag line="189" name="access" description="public"/>
          <tag line="189" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="189" name="static" description=""/>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file Request.php</error>
    </parse_markers>
  </file>
  <file path="Route.php" hash="e20ee53506109b9d3ac6ab00c063597c" package="Default">
    <class final="false" abstract="false" namespace="Core" line="34" package="MVC">
      <extends/>
      <name>Route</name>
      <full_name>\Core\Route</full_name>
      <docblock line="4">
        <description>A single route for the application.</description>
        <long-description>&lt;p&gt;Routes can contain variables which are prepended by a colon. Paths are greedy
by default, they will grab any URL that they match irrespective of what comes
after the matched fragments of the request URL. Anything after the route path
will be parsed as a GET variable. E.g., The route path of:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;foo/:bar&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Will turn the request URL of:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;foo/hello/my/variables/go/here/foobar&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Into the following GET variables (minus controller/action indexes):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;array(
    'bar'    =&gt; 'hello',
    'my'     =&gt; 'variables',
    'go'     =&gt; 'here',
    'foobar' =&gt; true
)
&lt;/code&gt;&lt;/pre&gt;</long-description>
        <tag line="4" name="copyright" description="Copyright (c) 2012-2013 Christopher Hill"/>
        <tag line="4" name="license" description="http://www.opensource.org/licenses/mit-license.php The MIT License"/>
        <tag line="4" name="author" description="Christopher Hill &lt;cjhill@gmail.com&gt;"/>
        <tag line="4" name="package" description="MVC"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="42" namespace="Core" package="Default">
        <name>$name</name>
        <default></default>
        <docblock line="36">
          <description>The unique name of this route.</description>
          <long-description></long-description>
          <tag line="36" name="access" description="public"/>
          <tag line="36" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="50" namespace="Core" package="Default">
        <name>$route</name>
        <default></default>
        <docblock line="44">
          <description>The path that we want to match.</description>
          <long-description></long-description>
          <tag line="44" name="access" description="public"/>
          <tag line="44" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="60" namespace="Core" package="Default">
        <name>$paramFormats</name>
        <default>array()</default>
        <docblock line="52">
          <description>The regex tests for each variable in the URL.</description>
          <long-description>&lt;p&gt;Note: If no regex test is added for a variable then we use [\w&amp;#45;]+&lt;/p&gt;</long-description>
          <tag line="52" name="access" description="public"/>
          <tag line="52" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="75" namespace="Core" package="Default">
        <name>$endpoint</name>
        <default>array()</default>
        <docblock line="62">
          <description>To which controller/action we will dispatch this request.</description>
          <long-description>&lt;pre&gt;&lt;code&gt;array(
    'controller' =&gt; 'Foo',
    'action'     =&gt; 'bar'
)
&lt;/code&gt;&lt;/pre&gt;</long-description>
          <tag line="62" name="access" description="public"/>
          <tag line="62" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="83" package="MVC">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="77">
          <description>Create the route.</description>
          <long-description></long-description>
          <tag line="77" name="access" description="public"/>
          <tag line="77" name="param" description="The unique name of the route." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="83">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="108" package="MVC">
        <name>setRoute</name>
        <full_name>setRoute</full_name>
        <docblock line="87">
          <description>Set the path for this route.</description>
          <long-description>&lt;p&gt;Paths will we be worked out relative to your path root (as defined in your
projects config.ini). They can contain any combination of strings or
variables. A variable is declared by starting with a colon (:) and then a
series of a-z characters. The following are all examples of valid paths.&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;foo&lt;/li&gt;
    &lt;li&gt;foo/bar/:acme&lt;/li&gt;
    &lt;li&gt;:foo/:bar/:acme&lt;/li&gt;
    &lt;li&gt;:foo/bar/:acme&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To set the regex for these variables, use the setParamFormats() method.&lt;/p&gt;</long-description>
          <tag line="87" name="access" description="public"/>
          <tag line="87" name="param" description="The path for this route." type="string" variable="$route">
            <type by_reference="false">string</type>
          </tag>
          <tag line="87" name="return" description="The Route, for chainability." type="\Core\Core\Route">
            <type by_reference="false">\Core\Core\Route</type>
          </tag>
        </docblock>
        <argument line="108">
          <name>$route</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="136" package="MVC">
        <name>setFormat</name>
        <full_name>setFormat</full_name>
        <docblock line="113">
          <description>Set the regex patterns for each variable in the route.</description>
          <long-description>&lt;p&gt;If no regex pattern is passed in for a variable then we use [\w&amp;#45;]+&lt;/p&gt;

&lt;p&gt;All of your patterns will automatically start with ^, end with $, and will
include the pattern modifiers i and u. So, if you were to pass in the
regex pattern on \d+ then it would be evaluated as /^\d+$/iu&lt;/p&gt;

&lt;p&gt;If your path is&lt;/p&gt;

&lt;pre&gt;foo/:bar/:acme&lt;/pre&gt;

&lt;p&gt;then your $formats array could
potentially look like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;array(
   'bar'  =&gt; '\d+',
   'acme' =&gt; '(foo|bar)'
)
&lt;/code&gt;&lt;/pre&gt;</long-description>
          <tag line="113" name="access" description="public"/>
          <tag line="113" name="param" description="The regex patterns." type="array" variable="$formats">
            <type by_reference="false">array</type>
          </tag>
          <tag line="113" name="return" description="The Route, for chainability." type="\Core\Core\Route">
            <type by_reference="false">\Core\Core\Route</type>
          </tag>
        </docblock>
        <argument line="136">
          <name>$formats</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="159" package="MVC">
        <name>setEndpoint</name>
        <full_name>setEndpoint</full_name>
        <docblock line="141">
          <description>The endpoint for this route.</description>
          <long-description>&lt;p&gt;Can receive a controller and action. If no controller name is passed in
then the default 'index' controller is used. If no action name is passed
in then the default 'index' action is used.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;array(
    'controller' =&gt; 'Foo',
    'action'     =&gt; 'bar'
)
&lt;/code&gt;&lt;/pre&gt;</long-description>
          <tag line="141" name="access" description="public"/>
          <tag line="141" name="param" description="Where we will dispatch this request." type="array" variable="$endpoint">
            <type by_reference="false">array</type>
          </tag>
          <tag line="141" name="return" description="The Route, for chainability." type="\Core\Core\Route">
            <type by_reference="false">\Core\Core\Route</type>
          </tag>
        </docblock>
        <argument line="159">
          <name>$endpoint</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file Route.php</error>
    </parse_markers>
  </file>
  <file path="Router.php" hash="98f789745be976dc68efb0042dba3692" package="Default">
    <class final="false" abstract="false" namespace="Core" line="63" package="MVC">
      <extends/>
      <name>Router</name>
      <full_name>\Core\Router</full_name>
      <docblock line="4">
        <description>Determines which of the supplied routes will be used for the Dispatcher.</description>
        <long-description>&lt;p&gt;If no route is valid then we assume that you are using the default MVC pattern
of /controller/action/my/variables/go/here/foobar. This router matches from
first to last, so if potentially more than one route matches then we will
route to the first declared. This is due to exiting as soon as we locate a
valid route to save processing time. Routes are greedy by default, so place
your more specific routes first.&lt;/p&gt;

&lt;p&gt;All routes use the following pattern modifiers:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;i: PCRE_CASELESS: matching both uppercase and lowercase.&lt;/li&gt;
    &lt;li&gt;u: PCRE_UTF8:     Make strings UTF-8.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An example of how to use this class in the index.php is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;?php
// Global configurations
include dirname(__FILE__) . '/../Library/global.php';

// Creae new Router instance
$router = new Core\Router();
$router
    -&gt;addRoute('Foo')
    -&gt;setRoute('foo/:bar/:acme')
    -&gt;setFormat(array(
        'bar'  =&gt; '\d+',
        'acme' =&gt; '[a-z0-9]+')
    )
    -&gt;setEndpoint(array(
        'controller' =&gt; 'Foo',
        'action'     =&gt; 'bar')
    );

// Start the application
new Core\Front('MyProject', $router);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: If no regex formats are supplied then we use the default of [\w&amp;#45;]+ (any
alpha numeric character (a-z, 0-9, underscores) and dashes)
for the variable (:var) matching.&lt;/p&gt;

&lt;h2&gt;Reverse routing&lt;/h2&gt;

&lt;p&gt;URL's will often change. Defining them in a single place (the router) will
save you having to rewrite them in your View Helpers/Partials. It is also
safer because URL encoding will be taken care for you.&lt;/p&gt;</long-description>
        <tag line="4" name="copyright" description="Copyright (c) 2012-2013 Christopher Hill"/>
        <tag line="4" name="license" description="http://www.opensource.org/licenses/mit-license.php The MIT License"/>
        <tag line="4" name="author" description="Christopher Hill &lt;cjhill@gmail.com&gt;"/>
        <tag line="4" name="package" description="MVC"/>
        <tag line="4" name="see" description="\Core\/Library/MyProject/View/Helper/Route.php" refers="\Core\/Library/MyProject/View/Helper/Route.php"/>
      </docblock>
      <property final="false" static="true" visibility="private" line="72" namespace="Core" package="Default">
        <name>$_routes</name>
        <default>array()</default>
        <docblock line="65">
          <description>A collection of Route's that have been declared.</description>
          <long-description></long-description>
          <tag line="65" name="access" description="private"/>
          <tag line="65" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="65" name="static" description=""/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="80" namespace="Core" package="Default">
        <name>$_routePath</name>
        <default></default>
        <docblock line="74">
          <description>The portion of the request URL that the route has matched.</description>
          <long-description></long-description>
          <tag line="74" name="access" description="private"/>
          <tag line="74" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="90" package="MVC">
        <name>addRoute</name>
        <full_name>addRoute</full_name>
        <docblock line="82">
          <description>Add a new route to the router.</description>
          <long-description></long-description>
          <tag line="82" name="access" description="public"/>
          <tag line="82" name="param" description="The name of the route." type="string" variable="$routeName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="82" name="return" description="The new Route, for chainability." type="\Core\Core\Route">
            <type by_reference="false">\Core\Core\Route</type>
          </tag>
          <tag line="82" name="throws" description="If the route name has already been declared." type="\InvalidArgumentException">
            <type by_reference="false">\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="90">
          <name>$routeName</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="105" package="MVC">
        <name>route</name>
        <full_name>route</full_name>
        <docblock line="100">
          <description>Start the routing procedure and find a valid route, if any.</description>
          <long-description></long-description>
          <tag line="100" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Core" line="161" package="MVC">
        <name>routeTest</name>
        <full_name>routeTest</full_name>
        <docblock line="153">
          <description>Test to see if this route is valid against the URL.</description>
          <long-description></long-description>
          <tag line="153" name="access" description="private"/>
          <tag line="153" name="param" description="The URL to test the route against." type="array" variable="$requestUrl">
            <type by_reference="false">array</type>
          </tag>
          <tag line="153" name="param" description="A Route declared by the application." type="\Core\Core\Route" variable="$route">
            <type by_reference="false">\Core\Core\Route</type>
          </tag>
          <tag line="153" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="161">
          <name>$requestUrl</name>
          <default></default>
          <type/>
        </argument>
        <argument line="161">
          <name>$route</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="220" package="MVC">
        <name>reverse</name>
        <full_name>reverse</full_name>
        <docblock line="207">
          <description>Reverse the router.</description>
          <long-description>&lt;p&gt;Make a URL out of a route name and parameters, rather than parsing one.
Note that this function does not care about URL paths!&lt;/p&gt;</long-description>
          <tag line="207" name="access" description="public"/>
          <tag line="207" name="param" description="The name of the route we wish to generate a URL for." type="string" variable="$routeName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="207" name="param" description="The parameters that the route requires." type="array" variable="$params">
            <type by_reference="false">array</type>
          </tag>
          <tag line="207" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="207" name="throws" description="If the route does not exist." type="\Exception">
            <type by_reference="false">\Exception</type>
          </tag>
          <tag line="207" name="static" description=""/>
        </docblock>
        <argument line="220">
          <name>$routeName</name>
          <default></default>
          <type/>
        </argument>
        <argument line="220">
          <name>$params</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file Router.php</error>
    </parse_markers>
  </file>
  <file path="Store/Apc.php" hash="a16d61e73891702abd86a459769dbb8e" package="Default">
    <class final="false" abstract="false" namespace="Core\Store" line="12" package="MVC">
      <extends/>
      <implements>\Core\Store\StorageInterface</implements>
      <name>Apc</name>
      <full_name>\Core\Store\Apc</full_name>
      <docblock line="4">
        <description>Stores data within APC.</description>
        <long-description></long-description>
        <tag line="4" name="copyright" description="Copyright (c) 2012-2013 Christopher Hill"/>
        <tag line="4" name="license" description="http://www.opensource.org/licenses/mit-license.php The MIT License"/>
        <tag line="4" name="author" description="Christopher Hill &lt;cjhill@gmail.com&gt;"/>
        <tag line="4" name="package" description="MVC"/>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core\Store" line="22" package="MVC">
        <name>has</name>
        <full_name>has</full_name>
        <docblock line="14">
          <description>Check whether the variable exists in the store.</description>
          <long-description></long-description>
          <tag line="14" name="access" description="public"/>
          <tag line="14" name="param" description="The name of the variable to check existence of." type="string" variable="$variable">
            <type by_reference="false">string</type>
          </tag>
          <tag line="14" name="return" description="If the variable exists or not." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="14" name="static" description=""/>
        </docblock>
        <argument line="22">
          <name>$variable</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core\Store" line="37" package="MVC">
        <name>put</name>
        <full_name>put</full_name>
        <docblock line="26">
          <description>Store a variable for use.</description>
          <long-description></long-description>
          <tag line="26" name="access" description="public"/>
          <tag line="26" name="param" description="The name of the variable to store." type="string" variable="$variable">
            <type by_reference="false">string</type>
          </tag>
          <tag line="26" name="param" description="The data we wish to store." type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="26" name="param" description="Whether we are allowed to overwrite the variable." type="boolean" variable="$overwrite">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="26" name="return" description="If we managed to store the variable." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="26" name="throws" description="If the variable already exists when we try not to overwrite it." type="\Core\Store\Exception">
            <type by_reference="false">\Core\Store\Exception</type>
          </tag>
          <tag line="26" name="static" description=""/>
        </docblock>
        <argument line="37">
          <name>$variable</name>
          <default></default>
          <type/>
        </argument>
        <argument line="37">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <argument line="37">
          <name>$overwrite</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core\Store" line="57" package="MVC">
        <name>get</name>
        <full_name>get</full_name>
        <docblock line="48">
          <description>Return the variable's value from the store.</description>
          <long-description></long-description>
          <tag line="48" name="access" description="public"/>
          <tag line="48" name="param" description="The name of the variable in the store." type="string" variable="$variable">
            <type by_reference="false">string</type>
          </tag>
          <tag line="48" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="48" name="throws" description="If the variable does not exist." type="\Core\Store\Exception">
            <type by_reference="false">\Core\Store\Exception</type>
          </tag>
          <tag line="48" name="static" description=""/>
        </docblock>
        <argument line="57">
          <name>$variable</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core\Store" line="75" package="MVC">
        <name>remove</name>
        <full_name>remove</full_name>
        <docblock line="66">
          <description>Remove the variable in the store.</description>
          <long-description></long-description>
          <tag line="66" name="access" description="public"/>
          <tag line="66" name="param" description="The name of the variable to remove." type="string" variable="$variable">
            <type by_reference="false">string</type>
          </tag>
          <tag line="66" name="return" description="If the variable was removed successfully." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="66" name="throws" description="If the variable does not exist." type="\Core\Store\Exception">
            <type by_reference="false">\Core\Store\Exception</type>
          </tag>
          <tag line="66" name="static" description=""/>
        </docblock>
        <argument line="75">
          <name>$variable</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file Store/Apc.php</error>
    </parse_markers>
  </file>
  <file path="Store/Cookie.php" hash="41de556d5dc1b09a41763163ac26d487" package="Default">
    <class final="false" abstract="false" namespace="Core\Store" line="12" package="MVC">
      <extends/>
      <implements>\Core\Store\StorageInterface</implements>
      <name>Cookie</name>
      <full_name>\Core\Store\Cookie</full_name>
      <docblock line="4">
        <description>Stores data within the users own cookie store.</description>
        <long-description></long-description>
        <tag line="4" name="copyright" description="Copyright (c) 2012-2013 Christopher Hill"/>
        <tag line="4" name="license" description="http://www.opensource.org/licenses/mit-license.php The MIT License"/>
        <tag line="4" name="author" description="Christopher Hill &lt;cjhill@gmail.com&gt;"/>
        <tag line="4" name="package" description="MVC"/>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core\Store" line="22" package="MVC">
        <name>has</name>
        <full_name>has</full_name>
        <docblock line="14">
          <description>Check whether the variable exists in the store.</description>
          <long-description></long-description>
          <tag line="14" name="access" description="public"/>
          <tag line="14" name="param" description="The name of the variable to check existence of." type="string" variable="$variable">
            <type by_reference="false">string</type>
          </tag>
          <tag line="14" name="return" description="If the variable exists or not." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="14" name="static" description=""/>
        </docblock>
        <argument line="22">
          <name>$variable</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core\Store" line="38" package="MVC">
        <name>put</name>
        <full_name>put</full_name>
        <docblock line="26">
          <description>Store a variable for use.</description>
          <long-description></long-description>
          <tag line="26" name="access" description="public"/>
          <tag line="26" name="param" description="The name of the variable to store." type="string" variable="$variable">
            <type by_reference="false">string</type>
          </tag>
          <tag line="26" name="param" description="The data we wish to store." type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="26" name="param" description="How many seconds the cookie should be kept." type="int" variable="$expires">
            <type by_reference="false">int</type>
          </tag>
          <tag line="26" name="param" description="Whether we are allowed to overwrite the variable." type="boolean" variable="$overwrite">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="26" name="return" description="If we managed to store the variable." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="26" name="throws" description="If the variable already exists when we try not to overwrite it." type="\Core\Store\Exception">
            <type by_reference="false">\Core\Store\Exception</type>
          </tag>
          <tag line="26" name="static" description=""/>
        </docblock>
        <argument line="38">
          <name>$variable</name>
          <default></default>
          <type/>
        </argument>
        <argument line="38">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <argument line="38">
          <name>$expires</name>
          <default>1314000</default>
          <type/>
        </argument>
        <argument line="38">
          <name>$overwrite</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core\Store" line="57" package="MVC">
        <name>get</name>
        <full_name>get</full_name>
        <docblock line="48">
          <description>Return the variable's value from the store.</description>
          <long-description></long-description>
          <tag line="48" name="access" description="public"/>
          <tag line="48" name="param" description="The name of the variable in the store." type="string" variable="$variable">
            <type by_reference="false">string</type>
          </tag>
          <tag line="48" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="48" name="throws" description="If the variable does not exist." type="\Core\Store\Exception">
            <type by_reference="false">\Core\Store\Exception</type>
          </tag>
          <tag line="48" name="static" description=""/>
        </docblock>
        <argument line="57">
          <name>$variable</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core\Store" line="74" package="MVC">
        <name>remove</name>
        <full_name>remove</full_name>
        <docblock line="66">
          <description>Remove the variable in the store.</description>
          <long-description></long-description>
          <tag line="66" name="access" description="public"/>
          <tag line="66" name="param" description="The name of the variable to remove." type="string" variable="$variable">
            <type by_reference="false">string</type>
          </tag>
          <tag line="66" name="throws" description="If the variable does not exist." type="\Core\Store\Exception">
            <type by_reference="false">\Core\Store\Exception</type>
          </tag>
          <tag line="66" name="static" description=""/>
        </docblock>
        <argument line="74">
          <name>$variable</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file Store/Cookie.php</error>
    </parse_markers>
  </file>
  <file path="Store/Memcache.php" hash="7c6ae76459d6afd797cbf4aa8bfc35e9" package="Default">
    <class final="false" abstract="false" namespace="Core\Store" line="12" package="MVC">
      <extends/>
      <implements>\Core\Store\StorageInterface</implements>
      <name>Memcache</name>
      <full_name>\Core\Store\Memcache</full_name>
      <docblock line="4">
        <description>Stores data within Memcache.</description>
        <long-description></long-description>
        <tag line="4" name="copyright" description="Copyright (c) 2012-2013 Christopher Hill"/>
        <tag line="4" name="license" description="http://www.opensource.org/licenses/mit-license.php The MIT License"/>
        <tag line="4" name="author" description="Christopher Hill &lt;cjhill@gmail.com&gt;"/>
        <tag line="4" name="package" description="MVC"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="20" namespace="Core\Store" package="Default">
        <name>$_memcache</name>
        <default></default>
        <docblock line="14">
          <description>The reference to the Memcache server.</description>
          <long-description></long-description>
          <tag line="14" name="access" description="private"/>
          <tag line="14" name="var" description="or \Memcached" type="\Memcache">
            <type by_reference="false">\Memcache</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core\Store" line="31" package="MVC">
        <name>setup</name>
        <full_name>setup</full_name>
        <docblock line="22">
          <description>Setup Memcache for storing data.</description>
          <long-description></long-description>
          <tag line="22" name="access" description="public"/>
          <tag line="22" name="param" description="Whether we are using Memcache or Memcached." type="string" variable="$server">
            <type by_reference="false">string</type>
          </tag>
          <tag line="22" name="param" description="The location of the Memcache server." type="string" variable="$host">
            <type by_reference="false">string</type>
          </tag>
          <tag line="22" name="param" description="The port the Memcache server lives on." type="string" variable="$port">
            <type by_reference="false">string</type>
          </tag>
          <tag line="22" name="throws" description="If passed an incorrect server." type="\Exception">
            <type by_reference="false">\Exception</type>
          </tag>
        </docblock>
        <argument line="31">
          <name>$server</name>
          <default></default>
          <type/>
        </argument>
        <argument line="31">
          <name>$host</name>
          <default></default>
          <type/>
        </argument>
        <argument line="31">
          <name>$port</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core\Store" line="51" package="MVC">
        <name>has</name>
        <full_name>has</full_name>
        <docblock line="43">
          <description>Check whether the variable exists in the store.</description>
          <long-description></long-description>
          <tag line="43" name="access" description="public"/>
          <tag line="43" name="param" description="The name of the variable to check existence of." type="string" variable="$variable">
            <type by_reference="false">string</type>
          </tag>
          <tag line="43" name="return" description="If the variable exists or not." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="43" name="static" description=""/>
        </docblock>
        <argument line="51">
          <name>$variable</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core\Store" line="66" package="MVC">
        <name>put</name>
        <full_name>put</full_name>
        <docblock line="55">
          <description>Store a variable for use.</description>
          <long-description></long-description>
          <tag line="55" name="access" description="public"/>
          <tag line="55" name="param" description="The name of the variable to store." type="string" variable="$variable">
            <type by_reference="false">string</type>
          </tag>
          <tag line="55" name="param" description="The data we wish to store." type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="55" name="param" description="Whether we are allowed to overwrite the variable." type="boolean" variable="$overwrite">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="55" name="return" description="If we managed to store the variable." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="55" name="throws" description="If the variable already exists when we try not to overwrite it." type="\Core\Store\Exception">
            <type by_reference="false">\Core\Store\Exception</type>
          </tag>
          <tag line="55" name="static" description=""/>
        </docblock>
        <argument line="66">
          <name>$variable</name>
          <default></default>
          <type/>
        </argument>
        <argument line="66">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <argument line="66">
          <name>$overwrite</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core\Store" line="84" package="MVC">
        <name>get</name>
        <full_name>get</full_name>
        <docblock line="75">
          <description>Return the variable's value from the store.</description>
          <long-description></long-description>
          <tag line="75" name="access" description="public"/>
          <tag line="75" name="param" description="The name of the variable in the store." type="string" variable="$variable">
            <type by_reference="false">string</type>
          </tag>
          <tag line="75" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="75" name="throws" description="If the variable does not exist." type="\Core\Store\Exception">
            <type by_reference="false">\Core\Store\Exception</type>
          </tag>
          <tag line="75" name="static" description=""/>
        </docblock>
        <argument line="84">
          <name>$variable</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core\Store" line="102" package="MVC">
        <name>remove</name>
        <full_name>remove</full_name>
        <docblock line="93">
          <description>Remove the variable in the store.</description>
          <long-description></long-description>
          <tag line="93" name="access" description="public"/>
          <tag line="93" name="param" description="The name of the variable to remove." type="string" variable="$variable">
            <type by_reference="false">string</type>
          </tag>
          <tag line="93" name="return" description="If the variable was removed successfully." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="93" name="throws" description="If the variable does not exist." type="\Core\Store\Exception">
            <type by_reference="false">\Core\Store\Exception</type>
          </tag>
          <tag line="93" name="static" description=""/>
        </docblock>
        <argument line="102">
          <name>$variable</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file Store/Memcache.php</error>
    </parse_markers>
  </file>
  <file path="Store/Request.php" hash="0a0f87de59e91b7f1c79729358692676" package="Default">
    <class final="false" abstract="false" namespace="Core\Store" line="12" package="MVC">
      <extends/>
      <implements>\Core\Store\StorageInterface</implements>
      <name>Request</name>
      <full_name>\Core\Store\Request</full_name>
      <docblock line="4">
        <description>Stores data for a single request, which does not persist.</description>
        <long-description></long-description>
        <tag line="4" name="copyright" description="Copyright (c) 2012-2013 Christopher Hill"/>
        <tag line="4" name="license" description="http://www.opensource.org/licenses/mit-license.php The MIT License"/>
        <tag line="4" name="author" description="Christopher Hill &lt;cjhill@gmail.com&gt;"/>
        <tag line="4" name="package" description="MVC"/>
      </docblock>
      <property final="false" static="true" visibility="public" line="21" namespace="Core\Store" package="Default">
        <name>$store</name>
        <default></default>
        <docblock line="14">
          <description>A store for all the variables set.</description>
          <long-description></long-description>
          <tag line="14" name="access" description="public"/>
          <tag line="14" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="14" name="static" description=""/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core\Store" line="31" package="MVC">
        <name>has</name>
        <full_name>has</full_name>
        <docblock line="23">
          <description>Check whether the variable exists in the store.</description>
          <long-description></long-description>
          <tag line="23" name="access" description="public"/>
          <tag line="23" name="param" description="The name of the variable to check existence of." type="string" variable="$variable">
            <type by_reference="false">string</type>
          </tag>
          <tag line="23" name="return" description="If the variable exists or not." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="23" name="static" description=""/>
        </docblock>
        <argument line="31">
          <name>$variable</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core\Store" line="46" package="MVC">
        <name>put</name>
        <full_name>put</full_name>
        <docblock line="35">
          <description>Store a variable for use.</description>
          <long-description></long-description>
          <tag line="35" name="access" description="public"/>
          <tag line="35" name="param" description="The name of the variable to store." type="string" variable="$variable">
            <type by_reference="false">string</type>
          </tag>
          <tag line="35" name="param" description="The data we wish to store." type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="35" name="param" description="Whether we are allowed to overwrite the variable." type="boolean" variable="$overwrite">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="35" name="return" description="If we managed to store the variable." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="35" name="throws" description="If the variable already exists when we try not to overwrite it." type="\Core\Store\Exception">
            <type by_reference="false">\Core\Store\Exception</type>
          </tag>
          <tag line="35" name="static" description=""/>
        </docblock>
        <argument line="46">
          <name>$variable</name>
          <default></default>
          <type/>
        </argument>
        <argument line="46">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <argument line="46">
          <name>$overwrite</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core\Store" line="65" package="MVC">
        <name>get</name>
        <full_name>get</full_name>
        <docblock line="56">
          <description>Return the variable's value from the store.</description>
          <long-description></long-description>
          <tag line="56" name="access" description="public"/>
          <tag line="56" name="param" description="The name of the variable in the store." type="string" variable="$variable">
            <type by_reference="false">string</type>
          </tag>
          <tag line="56" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="56" name="throws" description="If the variable does not exist." type="\Core\Store\Exception">
            <type by_reference="false">\Core\Store\Exception</type>
          </tag>
          <tag line="56" name="static" description=""/>
        </docblock>
        <argument line="65">
          <name>$variable</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core\Store" line="83" package="MVC">
        <name>remove</name>
        <full_name>remove</full_name>
        <docblock line="74">
          <description>Remove the variable in the store.</description>
          <long-description></long-description>
          <tag line="74" name="access" description="public"/>
          <tag line="74" name="param" description="The name of the variable to remove." type="string" variable="$variable">
            <type by_reference="false">string</type>
          </tag>
          <tag line="74" name="return" description="If the variable was removed successfully." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="74" name="throws" description="If the variable does not exist." type="\Core\Store\Exception">
            <type by_reference="false">\Core\Store\Exception</type>
          </tag>
          <tag line="74" name="static" description=""/>
        </docblock>
        <argument line="83">
          <name>$variable</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file Store/Request.php</error>
    </parse_markers>
  </file>
  <file path="Store/Session.php" hash="b3cd12d9d67a4820da1c4367bc06576b" package="Default">
    <class final="false" abstract="false" namespace="Core\Store" line="12" package="MVC">
      <extends/>
      <implements>\Core\Store\StorageInterface</implements>
      <name>Session</name>
      <full_name>\Core\Store\Session</full_name>
      <docblock line="4">
        <description>Stores data for a user session.</description>
        <long-description></long-description>
        <tag line="4" name="copyright" description="Copyright (c) 2012-2013 Christopher Hill"/>
        <tag line="4" name="license" description="http://www.opensource.org/licenses/mit-license.php The MIT License"/>
        <tag line="4" name="author" description="Christopher Hill &lt;cjhill@gmail.com&gt;"/>
        <tag line="4" name="package" description="MVC"/>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core\Store" line="22" package="MVC">
        <name>has</name>
        <full_name>has</full_name>
        <docblock line="14">
          <description>Check whether the variable exists in the store.</description>
          <long-description></long-description>
          <tag line="14" name="access" description="public"/>
          <tag line="14" name="param" description="The name of the variable to check existence of." type="string" variable="$variable">
            <type by_reference="false">string</type>
          </tag>
          <tag line="14" name="return" description="If the variable exists or not." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="14" name="static" description=""/>
        </docblock>
        <argument line="22">
          <name>$variable</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core\Store" line="37" package="MVC">
        <name>put</name>
        <full_name>put</full_name>
        <docblock line="26">
          <description>Store a variable for use.</description>
          <long-description></long-description>
          <tag line="26" name="access" description="public"/>
          <tag line="26" name="param" description="The name of the variable to store." type="string" variable="$variable">
            <type by_reference="false">string</type>
          </tag>
          <tag line="26" name="param" description="The data we wish to store." type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="26" name="param" description="Whether we are allowed to overwrite the variable." type="boolean" variable="$overwrite">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="26" name="return" description="If we managed to store the variable." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="26" name="throws" description="If the variable already exists when we try not to overwrite it." type="\Core\Store\Exception">
            <type by_reference="false">\Core\Store\Exception</type>
          </tag>
          <tag line="26" name="static" description=""/>
        </docblock>
        <argument line="37">
          <name>$variable</name>
          <default></default>
          <type/>
        </argument>
        <argument line="37">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <argument line="37">
          <name>$overwrite</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core\Store" line="56" package="MVC">
        <name>get</name>
        <full_name>get</full_name>
        <docblock line="47">
          <description>Return the variable's value from the store.</description>
          <long-description></long-description>
          <tag line="47" name="access" description="public"/>
          <tag line="47" name="param" description="The name of the variable in the store." type="string" variable="$variable">
            <type by_reference="false">string</type>
          </tag>
          <tag line="47" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="47" name="throws" description="If the variable does not exist." type="\Core\Store\Exception">
            <type by_reference="false">\Core\Store\Exception</type>
          </tag>
          <tag line="47" name="static" description=""/>
        </docblock>
        <argument line="56">
          <name>$variable</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core\Store" line="74" package="MVC">
        <name>remove</name>
        <full_name>remove</full_name>
        <docblock line="65">
          <description>Remove the variable in the store.</description>
          <long-description></long-description>
          <tag line="65" name="access" description="public"/>
          <tag line="65" name="param" description="The name of the variable to remove." type="string" variable="$variable">
            <type by_reference="false">string</type>
          </tag>
          <tag line="65" name="return" description="If the variable was removed successfully." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="65" name="throws" description="If the variable does not exist." type="\Core\Store\Exception">
            <type by_reference="false">\Core\Store\Exception</type>
          </tag>
          <tag line="65" name="static" description=""/>
        </docblock>
        <argument line="74">
          <name>$variable</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file Store/Session.php</error>
    </parse_markers>
  </file>
  <file path="Store/StorageInterface.php" hash="d14f428df473eef00a8755b2137f337e" package="Default">
    <interface namespace="Core\Store" line="12" package="MVC">
      <name>StorageInterface</name>
      <full_name>\Core\Store\StorageInterface</full_name>
      <docblock line="4">
        <description>Provides the required methods that each Store requires at a minimum.</description>
        <long-description></long-description>
        <tag line="4" name="copyright" description="Copyright (c) 2012-2013 Christopher Hill"/>
        <tag line="4" name="license" description="http://www.opensource.org/licenses/mit-license.php The MIT License"/>
        <tag line="4" name="author" description="Christopher Hill &lt;cjhill@gmail.com&gt;"/>
        <tag line="4" name="package" description="MVC"/>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core\Store" line="21" package="MVC">
        <name>has</name>
        <full_name>has</full_name>
        <docblock line="14">
          <description>Check whether the variable exists in the store.</description>
          <long-description></long-description>
          <tag line="14" name="access" description="public"/>
          <tag line="14" name="param" description="The name of the variable to check existence of." type="string" variable="$variable">
            <type by_reference="false">string</type>
          </tag>
          <tag line="14" name="return" description="If the variable exists or not." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="21">
          <name>$variable</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core\Store" line="32" package="MVC">
        <name>put</name>
        <full_name>put</full_name>
        <docblock line="23">
          <description>Store a variable for use.</description>
          <long-description></long-description>
          <tag line="23" name="access" description="public"/>
          <tag line="23" name="param" description="The name of the variable to store." type="string" variable="$variable">
            <type by_reference="false">string</type>
          </tag>
          <tag line="23" name="param" description="The data we wish to store." type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="23" name="param" description="Whether we are allowed to overwrite the variable." type="boolean" variable="$overwrite">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="23" name="return" description="If we managed to store the variable." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="32">
          <name>$variable</name>
          <default></default>
          <type/>
        </argument>
        <argument line="32">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <argument line="32">
          <name>$overwrite</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core\Store" line="41" package="MVC">
        <name>get</name>
        <full_name>get</full_name>
        <docblock line="34">
          <description>Return the variable's value from the store.</description>
          <long-description></long-description>
          <tag line="34" name="access" description="public"/>
          <tag line="34" name="param" description="The name of the variable in the store." type="string" variable="$variable">
            <type by_reference="false">string</type>
          </tag>
          <tag line="34" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="41">
          <name>$variable</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core\Store" line="50" package="MVC">
        <name>remove</name>
        <full_name>remove</full_name>
        <docblock line="43">
          <description>Remove the variable in the store.</description>
          <long-description></long-description>
          <tag line="43" name="access" description="public"/>
          <tag line="43" name="param" description="The name of the variable to remove." type="string" variable="$variable">
            <type by_reference="false">string</type>
          </tag>
          <tag line="43" name="return" description="If the variable was removed successfully." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="50">
          <name>$variable</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </interface>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file Store/StorageInterface.php</error>
    </parse_markers>
  </file>
  <file path="Validate.php" hash="1250188e82129c504d03a3da4ed13df5" package="Default">
    <class final="false" abstract="false" namespace="Core" line="60" package="MVC">
      <extends/>
      <name>Validate</name>
      <full_name>\Core\Validate</full_name>
      <docblock line="4">
        <description>Validates user input.</description>
        <long-description>&lt;p&gt;This class can be run in "single" mode or "mass" mode. In both situations it
is designed to be human-readable, and provide a simple API to basic validation.&lt;/p&gt;

&lt;h2&gt;Single mode example&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;if (Core\Validate::is('cjhill@gmail.com', 'email')) {
    // Houston, we have a valid email address
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Mass mode example&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$form = new Validate(array(
    'Email address' =&gt; array(
        'value' =&gt; 'cjhill@gmail.com',
        'tests' =&gt; array(
            'required' =&gt; true,
            'is'       =&gt; 'email'
        )
    ),
    'Age' =&gt; array(
        'value' =&gt; 20,
        'tests' =&gt; array(
            'between' =&gt; array('min' =&gt; 13, 'max' =&gt; 99)
        )
    ),
    'Password' =&gt; array(
        'value' =&gt; 's3cr37',
        'tests' =&gt; array(
            'required'      =&gt; true,
            'required_with' =&gt; array('Email address')
            'length'        =&gt; array('min' =&gt; 8)
        )
    )
));

if (! $form-&gt;isValid()) {
    // Errors
    var_dump($validate-&gt;getErrors());
}
&lt;/code&gt;&lt;/pre&gt;</long-description>
        <tag line="4" name="copyright" description="Copyright (c) 2012-2013 Christopher Hill"/>
        <tag line="4" name="license" description="http://www.opensource.org/licenses/mit-license.php The MIT License"/>
        <tag line="4" name="author" description="Christopher Hill &lt;cjhill@gmail.com&gt;"/>
        <tag line="4" name="package" description="MVC"/>
        <tag line="4" name="todo" description="Integrate with a Core\Notice class."/>
      </docblock>
      <property final="false" static="false" visibility="private" line="87" namespace="Core" package="Default">
        <name>$_input</name>
        <default>array()</default>
        <docblock line="62">
          <description>The inputs that need to be validated.</description>
          <long-description>&lt;p&gt;List of possible tests to perform:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;'required'      =&gt; true&lt;/li&gt;
    &lt;li&gt;'required_with' =&gt; array('foo', 'bar')&lt;/li&gt;
    &lt;li&gt;
        You can explicitly set both min and max, or just one:
        &lt;ul&gt;
            &lt;li&gt;'length' =&gt; array('min' =&gt; 5, 'max' =&gt; 10)&lt;/li&gt;
            &lt;li&gt;'length' =&gt; array('min' =&gt; 5)&lt;/li&gt;
            &lt;li&gt;'length' =&gt; array('max' =&gt; 10)&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;'is'      =&gt; 'boolean|email|float|int|ip|url'&lt;/li&gt;
    &lt;li&gt;'exactly' =&gt; array('foobar', 'acme')/li&gt;
    &lt;li&gt;'between' =&gt; array('min' =&gt; 10, 'max' =&gt; 100)&lt;/li&gt;
    &lt;li&gt;'regex'   =&gt; '/[a-z0-9]/gi'
&lt;/ul&gt;</long-description>
          <tag line="62" name="access" description="private"/>
          <tag line="62" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="95" namespace="Core" package="Default">
        <name>$_validated</name>
        <default>false</default>
        <docblock line="89">
          <description>Whether we have run the validation tests on the inputs.</description>
          <long-description></long-description>
          <tag line="89" name="access" description="private"/>
          <tag line="89" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="103" namespace="Core" package="Default">
        <name>$_error</name>
        <default>array()</default>
        <docblock line="97">
          <description>A collection of errors that have occurred with the inputs and their tests.</description>
          <long-description></long-description>
          <tag line="97" name="access" description="private"/>
          <tag line="97" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="112" package="MVC">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="105">
          <description>Set the inputs that need to be validated.</description>
          <long-description></long-description>
          <tag line="105" name="access" description="public"/>
          <tag line="105" name="param" description="The inputs that need to be validated." type="array" variable="$input">
            <type by_reference="false">array</type>
          </tag>
          <tag line="105" name="param" description="Whether we should run the validation automatically." type="boolean" variable="$autorun">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="112">
          <name>$input</name>
          <default></default>
          <type/>
        </argument>
        <argument line="112">
          <name>$autorun</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="128" package="MVC">
        <name>validate</name>
        <full_name>validate</full_name>
        <docblock line="122">
          <description>Run the validation on each input that has been passed in.</description>
          <long-description></long-description>
          <tag line="122" name="access" description="public"/>
          <tag line="122" name="return" description="Whether the validation was successful or not." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Core" line="167" package="MVC">
        <name>required</name>
        <full_name>required</full_name>
        <docblock line="159">
          <description>Test to see if the input actually has a value.</description>
          <long-description></long-description>
          <tag line="159" name="access" description="private"/>
          <tag line="159" name="param" description="The value of the input." type="string" variable="$inputValue">
            <type by_reference="false">string</type>
          </tag>
          <tag line="159" name="param" description="The parameters for this test." type="array" variable="$testParams">
            <type by_reference="false">array</type>
          </tag>
          <tag line="159" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="167">
          <name>$inputValue</name>
          <default></default>
          <type/>
        </argument>
        <argument line="167">
          <name>$testParams</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Core" line="182" package="MVC">
        <name>requiredWith</name>
        <full_name>requiredWith</full_name>
        <docblock line="171">
          <description>Test to see if the input's other required fields are valid and exist.</description>
          <long-description>&lt;p&gt;We only test to see if the required inputs have been defined. Any further
validating should be done on the required input.&lt;/p&gt;</long-description>
          <tag line="171" name="access" description="private"/>
          <tag line="171" name="param" description="The value of the input." type="string" variable="$inputValue">
            <type by_reference="false">string</type>
          </tag>
          <tag line="171" name="param" description="The parameters for this test." type="array" variable="$testParams">
            <type by_reference="false">array</type>
          </tag>
          <tag line="171" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="182">
          <name>$inputValue</name>
          <default></default>
          <type/>
        </argument>
        <argument line="182">
          <name>$testParams</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="211" package="MVC">
        <name>length</name>
        <full_name>length</full_name>
        <docblock line="199">
          <description>Test to see if the input's length is within bounds.</description>
          <long-description>&lt;p&gt;Note: This function can deal with a min, a max, or a min and a max boundary.&lt;/p&gt;</long-description>
          <tag line="199" name="access" description="public"/>
          <tag line="199" name="param" description="The value of the input." type="string|array" variable="$inputValue">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="199" name="param" description="The parameters for this test." type="array" variable="$testParams">
            <type by_reference="false">array</type>
          </tag>
          <tag line="199" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="199" name="throws" description="If neither a min or max boundary is specified." type="\Exception">
            <type by_reference="false">\Exception</type>
          </tag>
          <tag line="199" name="static" description=""/>
        </docblock>
        <argument line="211">
          <name>$inputValue</name>
          <default></default>
          <type/>
        </argument>
        <argument line="211">
          <name>$testParams</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="245" package="MVC">
        <name>is</name>
        <full_name>is</full_name>
        <docblock line="236">
          <description>Test to see if the input is a specific type.</description>
          <long-description></long-description>
          <tag line="236" name="access" description="public"/>
          <tag line="236" name="param" description="The value of the input." type="string" variable="$inputValue">
            <type by_reference="false">string</type>
          </tag>
          <tag line="236" name="param" description="The parameters for this test." type="array" variable="$testParams">
            <type by_reference="false">array</type>
          </tag>
          <tag line="236" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="236" name="static" description=""/>
        </docblock>
        <argument line="245">
          <name>$inputValue</name>
          <default></default>
          <type/>
        </argument>
        <argument line="245">
          <name>$testParams</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="277" package="MVC">
        <name>exactly</name>
        <full_name>exactly</full_name>
        <docblock line="266">
          <description>Test to see if the input matches exactly another value.</description>
          <long-description>&lt;p&gt;Note: We also check for same data types, so "1" and 1 will fail.&lt;/p&gt;</long-description>
          <tag line="266" name="access" description="public"/>
          <tag line="266" name="param" description="The value of the input." type="string" variable="$inputValue">
            <type by_reference="false">string</type>
          </tag>
          <tag line="266" name="param" description="The parameters for this test." type="array" variable="$testParams">
            <type by_reference="false">array</type>
          </tag>
          <tag line="266" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="266" name="static" description=""/>
        </docblock>
        <argument line="277">
          <name>$inputValue</name>
          <default></default>
          <type/>
        </argument>
        <argument line="277">
          <name>$testParams</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="293" package="MVC">
        <name>between</name>
        <full_name>between</full_name>
        <docblock line="281">
          <description>Test to see if the input is between two numbers.</description>
          <long-description>&lt;p&gt;Note: We check the datatype of the input first to make sure it is an int.&lt;/p&gt;</long-description>
          <tag line="281" name="access" description="public"/>
          <tag line="281" name="param" description="The value of the input." type="string" variable="$inputValue">
            <type by_reference="false">string</type>
          </tag>
          <tag line="281" name="param" description="The parameters for this test." type="array" variable="$testParams">
            <type by_reference="false">array</type>
          </tag>
          <tag line="281" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="281" name="throws" description="If the user has supplied no min and max boundary." type="\Exception">
            <type by_reference="false">\Exception</type>
          </tag>
          <tag line="281" name="static" description=""/>
        </docblock>
        <argument line="293">
          <name>$inputValue</name>
          <default></default>
          <type/>
        </argument>
        <argument line="293">
          <name>$testParams</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Core" line="321" package="MVC">
        <name>regex</name>
        <full_name>regex</full_name>
        <docblock line="312">
          <description>Whether the input matches a regular expression.</description>
          <long-description></long-description>
          <tag line="312" name="access" description="public"/>
          <tag line="312" name="param" description="The value of the input." type="string" variable="$inputValue">
            <type by_reference="false">string</type>
          </tag>
          <tag line="312" name="param" description="The parameters for this test." type="array" variable="$testParams">
            <type by_reference="false">array</type>
          </tag>
          <tag line="312" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="312" name="static" description=""/>
        </docblock>
        <argument line="321">
          <name>$inputValue</name>
          <default></default>
          <type/>
        </argument>
        <argument line="321">
          <name>$testParams</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Core" line="333" package="MVC">
        <name>addError</name>
        <full_name>addError</full_name>
        <docblock line="325">
          <description>Add a human readable error message.</description>
          <long-description></long-description>
          <tag line="325" name="access" description="private"/>
          <tag line="325" name="param" description="The value of the input." type="string" variable="$inputName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="325" name="param" description="The parameters for this test." type="array" variable="$testName">
            <type by_reference="false">array</type>
          </tag>
          <tag line="325" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="333">
          <name>$inputName</name>
          <default></default>
          <type/>
        </argument>
        <argument line="333">
          <name>$testName</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="355" package="MVC">
        <name>isValid</name>
        <full_name>isValid</full_name>
        <docblock line="349">
          <description>Return the outcome of the validation.</description>
          <long-description></long-description>
          <tag line="349" name="access" description="public"/>
          <tag line="349" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="365" package="MVC">
        <name>getErrors</name>
        <full_name>getErrors</full_name>
        <docblock line="359">
          <description>Return the errors that we found with the inputs.</description>
          <long-description></long-description>
          <tag line="359" name="access" description="public"/>
          <tag line="359" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="376" package="MVC">
        <name>hadError</name>
        <full_name>hadError</full_name>
        <docblock line="369">
          <description>Return if a single input had an error.</description>
          <long-description></long-description>
          <tag line="369" name="access" description="public"/>
          <tag line="369" name="param" description="The name of the input." type="string" variable="$inputName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="369" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="376">
          <name>$inputName</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="389" package="MVC">
        <name>__call</name>
        <full_name>__call</full_name>
        <docblock line="380">
          <description>The user has passed in a validating test that we do not know of.</description>
          <long-description></long-description>
          <tag line="380" name="access" description="public"/>
          <tag line="380" name="param" description="The name of the method the user called." type="string" variable="$testName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="380" name="param" description="The parameters that the user passed in." type="array" variable="$params">
            <type by_reference="false">array</type>
          </tag>
          <tag line="380" name="throws" description="If called then the user has entered an invalid test name." type="\Exception">
            <type by_reference="false">\Exception</type>
          </tag>
          <tag line="380" name="magic" description=""/>
        </docblock>
        <argument line="389">
          <name>$testName</name>
          <default></default>
          <type/>
        </argument>
        <argument line="389">
          <name>$params</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file Validate.php</error>
    </parse_markers>
  </file>
  <file path="View.php" hash="2033bcf3423477d46b8daab09a9e1e1d" package="Default">
    <include line="188" type="Include" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="Core" line="13" package="MVC">
      <extends/>
      <name>View</name>
      <full_name>\Core\View</full_name>
      <docblock line="4">
        <description>Handles the main functionality of the view including the parsing,
caching, and variable storage.</description>
        <long-description></long-description>
        <tag line="4" name="copyright" description="Copyright (c) 2012-2013 Christopher Hill"/>
        <tag line="4" name="license" description="http://www.opensource.org/licenses/mit-license.php The MIT License"/>
        <tag line="4" name="author" description="Christopher Hill &lt;cjhill@gmail.com&gt;"/>
        <tag line="4" name="package" description="MVC"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="21" namespace="Core" package="Default">
        <name>$controller</name>
        <default>'index'</default>
        <docblock line="15">
          <description>The controller that we need to render.</description>
          <long-description></long-description>
          <tag line="15" name="access" description="public"/>
          <tag line="15" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="29" namespace="Core" package="Default">
        <name>$action</name>
        <default>'index'</default>
        <docblock line="23">
          <description>The action that we need to render.</description>
          <long-description></long-description>
          <tag line="23" name="access" description="public"/>
          <tag line="23" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="37" namespace="Core" package="Default">
        <name>$layout</name>
        <default>'default'</default>
        <docblock line="31">
          <description>Which layout we are going to use for this view.</description>
          <long-description></long-description>
          <tag line="31" name="access" description="public"/>
          <tag line="31" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="45" namespace="Core" package="Default">
        <name>$_variables</name>
        <default>array()</default>
        <docblock line="39">
          <description>The variables that we want to pass to the view.</description>
          <long-description></long-description>
          <tag line="39" name="access" description="public"/>
          <tag line="39" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="54" package="MVC">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="47">
          <description>The View has been created.</description>
          <long-description>&lt;p&gt;We need to give a reference to ourself to the View Helper.&lt;/p&gt;</long-description>
          <tag line="47" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="68" package="MVC">
        <name>addVariable</name>
        <full_name>addVariable</full_name>
        <docblock line="58">
          <description>Add a variable to the view.</description>
          <long-description>&lt;p&gt;These variables will be made available to the view. Any variable that has
already been defined will be overwritten.&lt;/p&gt;</long-description>
          <tag line="58" name="access" description="public"/>
          <tag line="58" name="param" description="The variable we wish to add to the view." type="string" variable="$variable">
            <type by_reference="false">string</type>
          </tag>
          <tag line="58" name="param" description="The value of the variable." type="string" variable="$value">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="68">
          <name>$variable</name>
          <default></default>
          <type/>
        </argument>
        <argument line="68">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="79" package="MVC">
        <name>getVariable</name>
        <full_name>getVariable</full_name>
        <docblock line="72">
          <description>Returns a set variable if it exists.</description>
          <long-description></long-description>
          <tag line="72" name="access" description="public"/>
          <tag line="72" name="param" description="The variable that we wish to retrieve from the view." type="string" variable="$variable">
            <type by_reference="false">string</type>
          </tag>
          <tag line="72" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="79">
          <name>$variable</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="91" package="MVC">
        <name>render</name>
        <full_name>render</full_name>
        <docblock line="85">
          <description>Render the page.</description>
          <long-description></long-description>
          <tag line="85" name="access" description="public"/>
          <tag line="85" name="throws" description="If the view does not exist." type="\Core\Exception">
            <type by_reference="false">\Core\Exception</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="169" package="MVC">
        <name>parse</name>
        <full_name>parse</full_name>
        <docblock line="161">
          <description>Parse a template, also caching if desired.</description>
          <long-description></long-description>
          <tag line="161" name="param" description="The full path of the template file." type="string" variable="$template">
            <type by_reference="false">string</type>
          </tag>
          <tag line="161" name="param" description="The variables we wish to replace." type="array" variable="$variables">
            <type by_reference="false">array</type>
          </tag>
          <tag line="161" name="param" description="What to call the cached file." type="string" variable="$cacheName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="161" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="169">
          <name>$template</name>
          <default></default>
          <type/>
        </argument>
        <argument line="169">
          <name>$variables</name>
          <default></default>
          <type/>
        </argument>
        <argument line="169">
          <name>$cacheName</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="220" package="MVC">
        <name>__call</name>
        <full_name>__call</full_name>
        <docblock line="207">
          <description>Provides a nice interface to call view helpers.</description>
          <long-description>&lt;p&gt;This is a magic function, so any calls to the view/view helper which do not
exist will end up here. We only pass through the first parameter to make for
a nicer implementation in each view helper. This is why it needs to be an array.&lt;/p&gt;</long-description>
          <tag line="207" name="access" description="public"/>
          <tag line="207" name="param" description="The View Helper that we wish to use." type="string" variable="$helperName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="207" name="param" description="The parameters that need to be passed to the View Helper." type="array" variable="$param">
            <type by_reference="false">array</type>
          </tag>
          <tag line="207" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="207" name="magic" description=""/>
        </docblock>
        <argument line="220">
          <name>$helperName</name>
          <default></default>
          <type/>
        </argument>
        <argument line="220">
          <name>$param</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file View.php</error>
    </parse_markers>
  </file>
  <file path="ViewHelper.php" hash="8ad8afd49ee36f7d8b6b12a85524a6d1" package="Default">
    <class final="false" abstract="false" namespace="Core" line="12" package="MVC">
      <extends/>
      <name>ViewHelper</name>
      <full_name>\Core\ViewHelper</full_name>
      <docblock line="4">
        <description>Provides common functionality to View Helpers.</description>
        <long-description></long-description>
        <tag line="4" name="copyright" description="Copyright (c) 2012-2013 Christopher Hill"/>
        <tag line="4" name="license" description="http://www.opensource.org/licenses/mit-license.php The MIT License"/>
        <tag line="4" name="author" description="Christopher Hill &lt;cjhill@gmail.com&gt;"/>
        <tag line="4" name="package" description="MVC"/>
      </docblock>
      <property final="false" static="true" visibility="public" line="20" namespace="Core" package="Default">
        <name>$_view</name>
        <default></default>
        <docblock line="14">
          <description>The View, so all View Helpers can interact with it.</description>
          <long-description></long-description>
          <tag line="14" name="access" description="public"/>
          <tag line="14" name="var" description="" type="\Core\View">
            <type by_reference="false">\Core\View</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="Core" line="31" package="MVC">
        <name>renderPartial</name>
        <full_name>renderPartial</full_name>
        <docblock line="22">
          <description>Parses a template file and returns the converted HTML.</description>
          <long-description></long-description>
          <tag line="22" name="access" description="protected"/>
          <tag line="22" name="param" description="The name of the partial to render." type="string" variable="$template">
            <type by_reference="false">string</type>
          </tag>
          <tag line="22" name="param" description="An array of variables to replace." type="array" variable="$variables">
            <type by_reference="false">array</type>
          </tag>
          <tag line="22" name="param" description="null to not cache, string otherwise." type="mixed" variable="$cacheName">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="22" name="return" description="Converted template file into HTML." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="31">
          <name>$template</name>
          <default></default>
          <type/>
        </argument>
        <argument line="31">
          <name>$variables</name>
          <default></default>
          <type/>
        </argument>
        <argument line="31">
          <name>$cacheName</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="50" package="MVC">
        <name>__get</name>
        <full_name>__get</full_name>
        <docblock line="40">
          <description>Returns the view.</description>
          <long-description>&lt;p&gt;This function exists to provide a common interface for accessing the View.&lt;/p&gt;</long-description>
          <tag line="40" name="access" description="public"/>
          <tag line="40" name="param" description="The name of the variable to return." type="string" variable="$variableName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="40" name="return" description="" type="\Core\View">
            <type by_reference="false">\Core\View</type>
          </tag>
          <tag line="40" name="magic" description=""/>
        </docblock>
        <argument line="50">
          <name>$variableName</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Core" line="61" package="MVC">
        <name>__toString</name>
        <full_name>__toString</full_name>
        <docblock line="54">
          <description>If the View Helper is echo'd then we need to render it.</description>
          <long-description></long-description>
          <tag line="54" name="access" description="public"/>
          <tag line="54" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="54" name="magic" description=""/>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file ViewHelper.php</error>
    </parse_markers>
  </file>
  <package name="Default" full_name="Default"/>
  <package name="MVC" full_name="MVC"/>
  <namespace name="Core" full_name="Core">
    <namespace name="Store" full_name="Core\Store"/>
  </namespace>
  <marker count="3">todo</marker>
  <marker count="0">fixme</marker>
  <deprecated count="0"/>
</project>
